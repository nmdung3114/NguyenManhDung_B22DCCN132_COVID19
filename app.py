import streamlit as st
import sys

# Ki·ªÉm tra v√† import an to√†n
try:
    import pandas as pd
    import numpy as np
    import matplotlib.pyplot as plt
    import seaborn as sns
    import plotly.express as px
    import plotly.graph_objects as go
    import requests
    from datetime import datetime
    import warnings
    warnings.filterwarnings('ignore')
    
    # Th·ª≠ import wordcloud, n·∫øu l·ªói th√¨ b·ªè qua
    try:
        from wordcloud import WordCloud
        HAS_WORDCLOUD = True
    except ImportError:
        HAS_WORDCLOUD = False
        
    HAS_ALL_DEPS = True
except Exception as e:
    st.error(f"‚ùå L·ªói import: {e}")
    HAS_ALL_DEPS = False
# Th√™m ·ªü ƒë·∫ßu app.py - TR√äN T·∫§T C·∫¢ C√ÅC IMPORT KH√ÅC
import streamlit as st
import sys
import os

try:
    import pandas as pd
    import numpy as np
    import matplotlib.pyplot as plt
    import seaborn as sns
    import plotly.express as px
    import plotly.graph_objects as go
    from wordcloud import WordCloud
    import requests
    from datetime import datetime
    import warnings
    warnings.filterwarnings('ignore')
    
    HAS_ALL_DEPS = True
except ImportError as e:
    st.error(f"üì¶ Thi·∫øu package: {e}")
    HAS_ALL_DEPS = False

# Ph·∫ßn c√≤n l·∫°i c·ªßa code...
# app.py
import streamlit as st
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
import plotly.express as px
import plotly.graph_objects as go
from wordcloud import WordCloud
import requests
from datetime import datetime
import warnings
warnings.filterwarnings('ignore')

# C·∫•u h√¨nh page
st.set_page_config(
    page_title="Ph√¢n T√≠ch COVID-19 - B22DCCN132",
    page_icon="ü¶†",
    layout="wide",
    initial_sidebar_state="expanded"
)

# Custom CSS
st.markdown("""
<style>
    .main-header {
        font-size: 3rem;
        color: #FF6B6B;
        text-align: center;
        margin-bottom: 2rem;
    }
    .metric-card {
        background-color: #262730;
        padding: 1rem;
        border-radius: 10px;
        border-left: 4px solid #FF6B6B;
        margin: 0.5rem 0;
    }
    .positive {
        color: #00FF00;
    }
    .negative {
        color: #FF6B6B;
    }
</style>
""", unsafe_allow_html=True)

# Ti√™u ƒë·ªÅ ·ª©ng d·ª•ng
st.markdown('<h1 class="main-header">ü¶† PH√ÇN T√çCH COVID-19 TO√ÄN C·∫¶U</h1>', unsafe_allow_html=True)
st.markdown("**Sinh vi√™n:** Nguy·ªÖn M·∫°nh D≈©ng - **MSSV:** B22DCCN132 - **M√¥n:** Khai ph√° d·ªØ li·ªáu")
st.markdown("---")

# H√†m l·∫•y d·ªØ li·ªáu COVID-19
@st.cache_data(ttl=3600)  # Cache 1 gi·ªù
def get_covid_data():
    """L·∫•y d·ªØ li·ªáu COVID-19 t·ª´ API"""
    try:
        st.info("üåê ƒêang k·∫øt n·ªëi API ƒë·ªÉ l·∫•y d·ªØ li·ªáu COVID-19 m·ªõi nh·∫•t...")
        url = "https://disease.sh/v3/covid-19/countries"
        response = requests.get(url, timeout=10)
        data = response.json()
        df = pd.DataFrame(data)
        
        # ƒê·ªïi t√™n c·ªôt sang ti·∫øng Vi·ªát
        column_mapping = {
            'country': 'Qu·ªëc_Gia',
            'cases': 'T·ªïng_Ca_Nhi·ªÖm', 
            'deaths': 'T·ªïng_T·ª≠_Vong',
            'recovered': 'T·ªïng_Kh·ªèi_B·ªánh',
            'population': 'D√¢n_S·ªë',
            'continent': 'Ch√¢u_L·ª•c'
        }
        df = df.rename(columns=column_mapping)
        
        # T·∫°o c√°c c·ªôt t√≠nh to√°n
        df['T·ªâ_L·ªá_T·ª≠_Vong'] = (df['T·ªïng_T·ª≠_Vong'] / df['T·ªïng_Ca_Nhi·ªÖm'] * 100).round(2)
        df['T·ªâ_L·ªá_Kh·ªèi_B·ªánh'] = (df['T·ªïng_Kh·ªèi_B·ªánh'] / df['T·ªïng_Ca_Nhi·ªÖm'] * 100).round(2)
        df['Ca_Nhi·ªÖm_Tri·ªáu_D√¢n'] = (df['T·ªïng_Ca_Nhi·ªÖm'] / df['D√¢n_S·ªë'] * 1000000).round(0)
        df = df.fillna(0)
        
        st.success(f"‚úÖ ƒê√£ t·∫£i d·ªØ li·ªáu t·ª´ {len(df)} qu·ªëc gia")
        return df
        
    except Exception as e:
        st.error(f"‚ùå L·ªói k·∫øt n·ªëi API: {e}")
        st.info("üîÑ ƒêang s·ª≠ d·ª•ng d·ªØ li·ªáu m·∫´u...")
        
        # D·ªØ li·ªáu m·∫´u
        sample_data = {
            'Qu·ªëc_Gia': ['Vietnam', 'USA', 'India', 'Brazil', 'UK', 'Germany', 'France', 'Japan', 'Korea', 'Thailand'],
            'T·ªïng_Ca_Nhi·ªÖm': [11500000, 100000000, 44000000, 34000000, 24000000, 32000000, 38000000, 22000000, 29000000, 4700000],
            'T·ªïng_T·ª≠_Vong': [43000, 1100000, 530000, 680000, 190000, 150000, 155000, 46000, 31000, 33000],
            'T·ªïng_Kh·ªèi_B·ªánh': [10600000, 95000000, 43000000, 33000000, 23000000, 31000000, 37000000, 21500000, 28500000, 4600000],
            'D√¢n_S·ªë': [98170000, 331000000, 1393000000, 213900000, 68200000, 83100000, 67500000, 125800000, 51300000, 71600000],
            'Ch√¢u_L·ª•c': ['Asia', 'North America', 'Asia', 'South America', 'Europe', 'Europe', 'Europe', 'Asia', 'Asia', 'Asia']
        }
        df = pd.DataFrame(sample_data)
        df['T·ªâ_L·ªá_T·ª≠_Vong'] = (df['T·ªïng_T·ª≠_Vong'] / df['T·ªïng_Ca_Nhi·ªÖm'] * 100).round(2)
        df['T·ªâ_L·ªá_Kh·ªèi_B·ªánh'] = (df['T·ªïng_Kh·ªèi_B·ªánh'] / df['T·ªïng_Ca_Nhi·ªÖm'] * 100).round(2)
        df['Ca_Nhi·ªÖm_Tri·ªáu_D√¢n'] = (df['T·ªïng_Ca_Nhi·ªÖm'] / df['D√¢n_S·ªë'] * 1000000).round(0)
        
        return df

# T·∫£i d·ªØ li·ªáu
df = get_covid_data()

# Sidebar
st.sidebar.header("‚öôÔ∏è C√ÄI ƒê·∫∂T PH√ÇN T√çCH")

# L·ª±a ch·ªçn qu·ªëc gia ƒë·ªÉ so s√°nh
countries = sorted(df['Qu·ªëc_Gia'].unique())
selected_country = st.sidebar.selectbox("üáªüá≥ Ch·ªçn qu·ªëc gia ch√≠nh:", countries, index=countries.index('Vietnam') if 'Vietnam' in countries else 0)

# L·ª±a ch·ªçn s·ªë qu·ªëc gia hi·ªÉn th·ªã
top_n = st.sidebar.slider("S·ªë qu·ªëc gia hi·ªÉn th·ªã:", 5, 20, 10)

# L·∫•y d·ªØ li·ªáu qu·ªëc gia ƒë∆∞·ª£c ch·ªçn
country_data = df[df['Qu·ªëc_Gia'] == selected_country]

# Tab ch√≠nh
tab1, tab2, tab3, tab4, tab5 = st.tabs([
    "üìä T·ªîNG QUAN", "üìà BI·ªÇU ƒê·ªí STATIC", "üé® BI·ªÇU ƒê·ªí T∆Ø∆†NG T√ÅC", 
    "‚òÅÔ∏è WORDCLOUD", "üìñ B√ÅO C√ÅO"
])

with tab1:
    st.header("üìä T·ªîNG QUAN COVID-19 TO√ÄN C·∫¶U")
    
    # Metrics row
    col1, col2, col3, col4 = st.columns(4)
    
    with col1:
        total_cases = df['T·ªïng_Ca_Nhi·ªÖm'].sum()
        st.metric("üåç T·ªïng Ca Nhi·ªÖm", f"{total_cases:,.0f}")
    
    with col2:
        total_deaths = df['T·ªïng_T·ª≠_Vong'].sum()
        st.metric("üíÄ T·ªïng T·ª≠ Vong", f"{total_deaths:,.0f}")
    
    with col3:
        avg_death_rate = df['T·ªâ_L·ªá_T·ª≠_Vong'].mean()
        st.metric("üìà T·ªâ L·ªá T·ª≠ Vong TB", f"{avg_death_rate:.2f}%")
    
    with col4:
        total_countries = len(df)
        st.metric("üá∫üá≥ S·ªë Qu·ªëc Gia", f"{total_countries}")
    
    # Th√¥ng tin qu·ªëc gia ƒë∆∞·ª£c ch·ªçn
    st.subheader(f"üáªüá≥ Th√¥ng Tin {selected_country}")
    
    if len(country_data) > 0:
        col1, col2, col3, col4 = st.columns(4)
        
        with col1:
            cases = country_data['T·ªïng_Ca_Nhi·ªÖm'].iloc[0]
            st.metric("üò∑ T·ªïng Ca Nhi·ªÖm", f"{cases:,.0f}")
        
        with col2:
            deaths = country_data['T·ªïng_T·ª≠_Vong'].iloc[0]
            st.metric("üíÄ T·ªïng T·ª≠ Vong", f"{deaths:,.0f}")
        
        with col3:
            death_rate = country_data['T·ªâ_L·ªá_T·ª≠_Vong'].iloc[0]
            world_avg = df['T·ªâ_L·ªá_T·ª≠_Vong'].mean()
            diff = death_rate - world_avg
            st.metric("üìä T·ªâ L·ªá T·ª≠ Vong", f"{death_rate:.2f}%", f"{diff:+.2f}% vs TB")
        
        with col4:
            cases_per_million = country_data['Ca_Nhi·ªÖm_Tri·ªáu_D√¢n'].iloc[0]
            st.metric("üë• Ca/1M D√¢n", f"{cases_per_million:,.0f}")
    
    # D·ªØ li·ªáu th√¥
    st.subheader("üìã D·ªØ Li·ªáu Th√¥ (10 d√≤ng ƒë·∫ßu)")
    st.dataframe(df.head(10), use_container_width=True)

with tab2:
    st.header("üìä BI·ªÇU ƒê·ªí STATIC - Y√äU C·∫¶U 3")
    
    # Y√äU C·∫¶U 3.1: Histogram & Boxplot
    st.subheader("1. Histogram & Boxplot - Ph√¢n Ph·ªëi T·ªâ L·ªá T·ª≠ Vong")
    
    fig, (ax1, ax2) = plt.subplots(1, 2, figsize=(15, 5))
    
    # Histogram
    ax1.hist(df['T·ªâ_L·ªá_T·ª≠_Vong'], bins=20, color='lightcoral', edgecolor='black', alpha=0.7)
    ax1.axvline(df['T·ªâ_L·ªá_T·ª≠_Vong'].mean(), color='red', linestyle='--', linewidth=2, 
                label=f'Trung b√¨nh: {df["T·ªâ_L·ªá_T·ª≠_Vong"].mean():.2f}%')
    if len(country_data) > 0:
        ax1.axvline(country_data['T·ªâ_L·ªá_T·ª≠_Vong'].iloc[0], color='blue', linestyle='--', linewidth=2, 
                    label=f'{selected_country}: {country_data["T·ªâ_L·ªá_T·ª≠_Vong"].iloc[0]:.2f}%')
    ax1.set_xlabel('T·ªâ L·ªá T·ª≠ Vong (%)')
    ax1.set_ylabel('S·ªë Qu·ªëc Gia')
    ax1.set_title('PH√ÇN B·ªê T·ªà L·ªÜ T·ª¨ VONG TO√ÄN C·∫¶U', fontweight='bold')
    ax1.legend()
    ax1.grid(True, alpha=0.3)
    
    # Boxplot
    ax2.boxplot(df['T·ªâ_L·ªá_T·ª≠_Vong'].dropna())
    ax2.set_ylabel('T·ªâ L·ªá T·ª≠ Vong (%)')
    ax2.set_title('BOXPLOT T·ªà L·ªÜ T·ª¨ VONG', fontweight='bold')
    ax2.grid(True, alpha=0.3)
    
    plt.tight_layout()
    st.pyplot(fig)
    
    # Y√äU C·∫¶U 3.2: Line & Area Chart
    st.subheader("2. Bi·ªÉu ƒê·ªì Top Qu·ªëc Gia Theo S·ªë Ca Nhi·ªÖm")
    
    top_countries = df.nlargest(top_n, 'T·ªïng_Ca_Nhi·ªÖm')
    
    fig, (ax1, ax2) = plt.subplots(2, 1, figsize=(12, 8))
    
    # Line chart
    ax1.plot(top_countries['Qu·ªëc_Gia'], top_countries['T·ªïng_Ca_Nhi·ªÖm'], 
             marker='o', linewidth=2, markersize=6, color='#FF6B6B')
    ax1.set_title(f'TOP {top_n} QU·ªêC GIA THEO S·ªê CA NHI·ªÑM', fontweight='bold')
    ax1.set_ylabel('T·ªïng Ca Nhi·ªÖm')
    ax1.tick_params(axis='x', rotation=45)
    ax1.grid(True, alpha=0.3)
    
    # Area chart
    ax2.fill_between(top_countries['Qu·ªëc_Gia'], top_countries['T·ªïng_T·ª≠_Vong'], 
                     alpha=0.3, color='#4ECDC4')
    ax2.plot(top_countries['Qu·ªëc_Gia'], top_countries['T·ªïng_T·ª≠_Vong'], 
             color='#4ECDC4', linewidth=2, marker='o')
    ax2.set_title(f'TOP {top_n} QU·ªêC GIA THEO S·ª¨ T·ª¨ VONG', fontweight='bold')
    ax2.set_xlabel('Qu·ªëc Gia')
    ax2.set_ylabel('T·ªïng T·ª≠ Vong')
    ax2.tick_params(axis='x', rotation=45)
    ax2.grid(True, alpha=0.3)
    
    plt.tight_layout()
    st.pyplot(fig)
    
    # Y√äU C·∫¶U 3.3: Scatter + Regression
    st.subheader("3. Scatter Plot & H·ªìi Quy - M·ªëi Quan H·ªá Ca Nhi·ªÖm & T·ª≠ Vong")
    
    fig, ax = plt.subplots(figsize=(10, 6))
    
    scatter = ax.scatter(df['T·ªïng_Ca_Nhi·ªÖm'], df['T·ªïng_T·ª≠_Vong'], 
                        alpha=0.6, s=50, c=df['T·ªâ_L·ªá_T·ª≠_Vong'], cmap='viridis')
    
    # Regression line
    if len(df) > 1:
        z = np.polyfit(df['T·ªïng_Ca_Nhi·ªÖm'], df['T·ªïng_T·ª≠_Vong'], 1)
        p = np.poly1d(z)
        ax.plot(df['T·ªïng_Ca_Nhi·ªÖm'], p(df['T·ªïng_Ca_Nhi·ªÖm']), "r--", alpha=0.8, linewidth=2)
    
    ax.set_xlabel('T·ªïng Ca Nhi·ªÖm')
    ax.set_ylabel('T·ªïng T·ª≠ Vong')
    ax.set_title('M·ªêI QUAN H·ªÜ GI·ªÆA CA NHI·ªÑM V√Ä T·ª¨ VONG', fontweight='bold')
    ax.grid(True, alpha=0.3)
    plt.colorbar(scatter, label='T·ªâ L·ªá T·ª≠ Vong (%)')
    
    st.pyplot(fig)
    
    # Y√äU C·∫¶U 3.4: Heatmap
    st.subheader("4. Heatmap T∆∞∆°ng Quan")
    
    numeric_cols = ['T·ªïng_Ca_Nhi·ªÖm', 'T·ªïng_T·ª≠_Vong', 'T·ªïng_Kh·ªèi_B·ªánh', 'D√¢n_S·ªë', 'T·ªâ_L·ªá_T·ª≠_Vong']
    correlation_matrix = df[numeric_cols].corr()
    
    fig, ax = plt.subplots(figsize=(8, 6))
    sns.heatmap(correlation_matrix, annot=True, cmap='coolwarm', center=0,
               square=True, fmt='.2f', cbar_kws={'shrink': 0.8}, ax=ax)
    ax.set_title('HEATMAP T∆Ø∆†NG QUAN C√ÅC CH·ªà S·ªê COVID-19', fontweight='bold', pad=20)
    
    st.pyplot(fig)

with tab3:
    st.header("üé® BI·ªÇU ƒê·ªí T∆Ø∆†NG T√ÅC - Y√äU C·∫¶U 4")
    
    # Y√äU C·∫¶U 4.1: Scatter plot t∆∞∆°ng t√°c
    st.subheader("1. Scatter Plot T∆∞∆°ng T√°c")
    
    fig = px.scatter(df, x='T·ªïng_Ca_Nhi·ªÖm', y='T·ªïng_T·ª≠_Vong', 
                     size='D√¢n_S·ªë', color='Ch√¢u_L·ª•c',
                     hover_name='Qu·ªëc_Gia', 
                     title='<b>M·ªêI QUAN H·ªÜ GI·ªÆA T·ªîNG CA NHI·ªÑM V√Ä T·ª¨ VONG</b>',
                     labels={
                         'T·ªïng_Ca_Nhi·ªÖm': 'T·ªïng Ca Nhi·ªÖm',
                         'T·ªïng_T·ª≠_Vong': 'T·ªïng T·ª≠ Vong', 
                         'Ch√¢u_L·ª•c': 'Ch√¢u L·ª•c',
                         'D√¢n_S·ªë': 'D√¢n S·ªë'
                     })
    
    # Highlight qu·ªëc gia ƒë∆∞·ª£c ch·ªçn
    if len(country_data) > 0:
        fig.add_trace(go.Scatter(
            x=country_data['T·ªïng_Ca_Nhi·ªÖm'],
            y=country_data['T·ªïng_T·ª≠_Vong'],
            mode='markers+text',
            marker=dict(size=20, color='red', symbol='star'),
            text=[selected_country],
            textposition="top center",
            name=selected_country
        ))
    
    fig.update_layout(template='plotly_white', height=500)
    st.plotly_chart(fig, use_container_width=True)
    
    # Y√äU C·∫¶U 4.2: Bar chart t∆∞∆°ng t√°c
    st.subheader("2. Bar Chart So S√°nh Theo Ch√¢u L·ª•c")
    
    continent_data = df.groupby('Ch√¢u_L·ª•c').agg({
        'T·ªïng_Ca_Nhi·ªÖm': 'sum',
        'T·ªïng_T·ª≠_Vong': 'sum',
        'Qu·ªëc_Gia': 'count'
    }).reset_index()
    
    continent_data['T·ªâ_L·ªá_T·ª≠_Vong'] = (continent_data['T·ªïng_T·ª≠_Vong'] / continent_data['T·ªïng_Ca_Nhi·ªÖm'] * 100).round(2)
    
    fig = px.bar(continent_data, 
                 x='Ch√¢u_L·ª•c', 
                 y='T·ªâ_L·ªá_T·ª≠_Vong',
                 color='T·ªâ_L·ªá_T·ª≠_Vong',
                 title='<b>T·ªà L·ªÜ T·ª¨ VONG THEO CH√ÇU L·ª§C</b>',
                 labels={
                     'T·ªâ_L·ªá_T·ª≠_Vong': 'T·ªâ L·ªá T·ª≠ Vong (%)', 
                     'Ch√¢u_L·ª•c': 'Ch√¢u L·ª•c'
                 },
                 text='T·ªâ_L·ªá_T·ª≠_Vong')
    
    fig.update_traces(texttemplate='%{text:.2f}%', textposition='outside')
    fig.update_layout(template='plotly_white', height=400, showlegend=False)
    st.plotly_chart(fig, use_container_width=True)
    
    # Y√äU C·∫¶U 4.3: Choropleth map t∆∞∆°ng t√°c
    st.subheader("3. B·∫£n ƒê·ªì T·ªâ L·ªá T·ª≠ Vong To√†n C·∫ßu")
    
    fig = px.choropleth(df, 
                        locations='Qu·ªëc_Gia',
                        locationmode='country names',
                        color='T·ªâ_L·ªá_T·ª≠_Vong',
                        hover_name='Qu·ªëc_Gia',
                        hover_data={
                            'T·ªïng_Ca_Nhi·ªÖm': ':,',
                            'T·ªïng_T·ª≠_Vong': ':,', 
                            'T·ªâ_L·ªá_T·ª≠_Vong': ':.2f'
                        },
                        color_continuous_scale='Reds',
                        title='<b>B·∫¢N ƒê·ªí T·ªà L·ªÜ T·ª¨ VONG COVID-19 TO√ÄN C·∫¶U</b>',
                        labels={'T·ªâ_L·ªá_T·ª≠_Vong': 'T·ªâ L·ªá T·ª≠ Vong (%)'})
    
    fig.update_layout(template='plotly_white', height=500)
    st.plotly_chart(fig, use_container_width=True)

with tab4:
    st.header("‚òÅÔ∏è WORDCLOUD - Y√äU C·∫¶U 3.6")
    
    # T·∫°o wordcloud
    word_freq = {}
    for _, row in df.iterrows():
        size = max(10, int(row['T·ªïng_Ca_Nhi·ªÖm'] / 1000000))
        word_freq[row['Qu·ªëc_Gia']] = size
    
    wordcloud = WordCloud(width=800, height=400, 
                          background_color='white',
                          colormap='Reds',
                          max_words=50).generate_from_frequencies(word_freq)
    
    fig, ax = plt.subplots(figsize=(12, 6))
    ax.imshow(wordcloud, interpolation='bilinear')
    ax.axis('off')
    ax.set_title('WORDCLOUD C√ÅC QU·ªêC GIA THEO S·ªê CA NHI·ªÑM\n(K√≠ch th∆∞·ªõc th·ªÉ hi·ªán m·ª©c ƒë·ªô ·∫£nh h∆∞·ªüng)', 
                fontsize=14, fontweight='bold', pad=20)
    
    st.pyplot(fig)

with tab5:
    st.header("üìñ B√ÅO C√ÅO PH√ÇN T√çCH - Y√äU C·∫¶U 5")
    
    # T·∫°o b√°o c√°o storytelling
    if len(country_data) > 0:
        country_death_rate = country_data['T·ªâ_L·ªá_T·ª≠_Vong'].iloc[0]
        country_cases_per_million = country_data['Ca_Nhi·ªÖm_Tri·ªáu_D√¢n'].iloc[0]
        world_avg_death_rate = df['T·ªâ_L·ªá_T·ª≠_Vong'].mean()
        world_avg_cases_per_million = df['Ca_Nhi·ªÖm_Tri·ªáu_D√¢n'].mean()
    else:
        country_death_rate = world_avg_death_rate = world_avg_cases_per_million = 0
    
    storytelling_content = f"""
    # üìä B√ÅO C√ÅO PH√ÇN T√çCH COVID-19
    ## {selected_country.upper()} TRONG B·ªêI C·∫¢NH TO√ÄN C·∫¶U

    **Th√¥ng tin sinh vi√™n:** Nguy·ªÖn M·∫°nh D≈©ng - B22DCCN132  
    **M√¥n h·ªçc:** Khai ph√° d·ªØ li·ªáu  
    **Ng√†y t·∫°o b√°o c√°o:** {datetime.now().strftime('%d/%m/%Y %H:%M')}

    ---

    ### üìä T·ªîNG QUAN D·ªÆ LI·ªÜU
    - **S·ªë qu·ªëc gia ph√¢n t√≠ch:** {len(df)}
    - **T·ªïng s·ªë ca nhi·ªÖm to√†n c·∫ßu:** {df['T·ªïng_Ca_Nhi·ªÖm'].sum():,}
    - **T·ªïng s·ªë t·ª≠ vong to√†n c·∫ßu:** {df['T·ªïng_T·ª≠_Vong'].sum():,}
    - **T·ªâ l·ªá t·ª≠ vong trung b√¨nh:** {df['T·ªâ_L·ªá_T·ª≠_Vong'].mean():.2f}%

    ### üáªüá≥ ƒê√ÅNH GI√Å T√åNH H√åNH {selected_country.upper()}

    #### üìà CH·ªà S·ªê CH√çNH:
    - **T·ªïng ca nhi·ªÖm:** {country_data['T·ªïng_Ca_Nhi·ªÖm'].iloc[0] if len(country_data) > 0 else 'N/A':,}
    - **T·ªïng t·ª≠ vong:** {country_data['T·ªïng_T·ª≠_Vong'].iloc[0] if len(country_data) > 0 else 'N/A':,}
    - **T·ªâ l·ªá t·ª≠ vong:** {country_death_rate:.2f}% ({'TH·∫§P H∆†N' if country_death_rate < world_avg_death_rate else 'CAO H∆†N'} trung b√¨nh th·∫ø gi·ªõi)
    - **Ca nhi·ªÖm/1 tri·ªáu d√¢n:** {country_cases_per_million:,.0f} ca

    #### üìä SO S√ÅNH V·ªöI TRUNG B√åNH TH·∫æ GI·ªöI:
    | Ch·ªâ S·ªë | {selected_country} | Trung B√¨nh Th·∫ø Gi·ªõi | Ch√™nh L·ªách |
    |--------|-------------------|-------------------|------------|
    | T·ªâ l·ªá t·ª≠ vong | {country_death_rate:.2f}% | {world_avg_death_rate:.2f}% | {country_death_rate - world_avg_death_rate:+.2f}% |
    | Ca/1M d√¢n | {country_cases_per_million:,.0f} | {world_avg_cases_per_million:,.0f} | {country_cases_per_million - world_avg_cases_per_million:+,.0f} |

    ### üîç PH√ÇN T√çCH CHUY√äN S√ÇU

    #### üìà XU H∆Ø·ªöNG TO√ÄN C·∫¶U:
    - Ph√¢n b·ªë t·ªâ l·ªá t·ª≠ vong **kh√¥ng ƒë·ªìng ƒë·ªÅu** gi·ªØa c√°c qu·ªëc gia
    - M·ªëi t∆∞∆°ng quan m·∫°nh gi·ªØa **t·ªïng ca nhi·ªÖm** v√† **t·ªïng t·ª≠ vong**
    - C√°c n∆∞·ªõc ph√°t tri·ªÉn c√≥ h·ªá th·ªëng y t·∫ø t·ªët th∆∞·ªùng c√≥ **t·ªâ l·ªá t·ª≠ vong th·∫•p h∆°n**

    #### üéØ ƒê√ÅNH GI√Å {selected_country.upper()}:
    - **ƒêi·ªÉm m·∫°nh:** {'T·ªâ l·ªá t·ª≠ vong th·∫•p' if country_death_rate < world_avg_death_rate else 'C·∫ßn c·∫£i thi·ªán h·ªá th·ªëng y t·∫ø'}
    - **Th√°ch th·ª©c:** {'Ki·ªÉm so√°t s·ªë ca nhi·ªÖm' if country_cases_per_million > world_avg_cases_per_million else 'Duy tr√¨ th√†nh t√≠ch'}

    ### üí° KHUY·∫æN NGH·ªä

    #### ƒê·ªêI V·ªöI {selected_country.upper()}:
    1. **Duy tr√¨ h·ªá th·ªëng gi√°m s√°t d·ªãch t·ªÖ**
    2. **TƒÉng c∆∞·ªùng nƒÉng l·ª±c x√©t nghi·ªám v√† ƒëi·ªÅu tr·ªã**
    3. **Chu·∫©n b·ªã s·∫µn s√†ng cho c√°c bi·∫øn ch·ªßng m·ªõi**

    #### B√ÄI H·ªåC TO√ÄN C·∫¶U:
    1. **Minh b·∫°ch d·ªØ li·ªáu** l√† ch√¨a kh√≥a ki·ªÉm so√°t d·ªãch
    2. **H·ª£p t√°c qu·ªëc t·∫ø** trong nghi√™n c·ª©u v√† ph√°t tri·ªÉn vaccine
    3. **·ª®ng d·ª•ng c√¥ng ngh·ªá** trong truy v·∫øt v√† gi√°m s√°t

    ---
    *B√°o c√°o ƒë∆∞·ª£c t·∫°o t·ª± ƒë·ªông t·ª´ d·ªØ li·ªáu th·ª±c t·∫ø - C√≥ th·ªÉ refresh ƒë·ªÉ c·∫≠p nh·∫≠t*
    """
    
    st.markdown(storytelling_content)
    
    # N√∫t export b√°o c√°o
    if st.button("üì• Export B√°o C√°o"):
        with open(f'bao_cao_covid19_{datetime.now().strftime("%Y%m%d_%H%M")}.md', 'w', encoding='utf-8') as f:
            f.write(storytelling_content)
        st.success("‚úÖ ƒê√£ xu·∫•t b√°o c√°o!")

# Footer
st.markdown("---")
st.markdown(
    "**B√†i t·∫≠p gi·ªØa k·ª≥ - M√¥n Khai ph√° d·ªØ li·ªáu** ‚Ä¢ "
    "**Nguy·ªÖn M·∫°nh D≈©ng - B22DCCN132** ‚Ä¢ "
    "**PTIT - 2024**"
)