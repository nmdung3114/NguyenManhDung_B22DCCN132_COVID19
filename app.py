# import streamlit as st
# import pandas as pd
# import numpy as np
# import matplotlib.pyplot as plt
# import seaborn as sns
# import plotly.express as px
# import plotly.graph_objects as go
# import requests
# from datetime import datetime
# import warnings
# warnings.filterwarnings('ignore')

# # C·∫•u h√¨nh page
# st.set_page_config(
#     page_title="Ph√¢n T√≠ch COVID-19 - B22DCCN132",
#     page_icon="ü¶†",
#     layout="wide",
#     initial_sidebar_state="expanded"
# )

# # Custom CSS
# st.markdown("""
# <style>
#     .main-header {
#         font-size: 3rem;
#         color: #FF6B6B;
#         text-align: center;
#         margin-bottom: 2rem;
#     }
#     .metric-card {
#         background-color: #262730;
#         padding: 1rem;
#         border-radius: 10px;
#         border-left: 4px solid #FF6B6B;
#         margin: 0.5rem 0;
#     }
#     .positive {
#         color: #00FF00;
#     }
#     .negative {
#         color: #FF6B6B;
#     }
# </style>
# """, unsafe_allow_html=True)

# # Ti√™u ƒë·ªÅ ·ª©ng d·ª•ng
# st.markdown('<h1 class="main-header">ü¶† PH√ÇN T√çCH COVID-19 TO√ÄN C·∫¶U</h1>', unsafe_allow_html=True)
# st.markdown("**Sinh vi√™n:** Nguy·ªÖn M·∫°nh D≈©ng - **MSSV:** B22DCCN132 - **M√¥n:** Khai ph√° d·ªØ li·ªáu")
# st.markdown("---")

# # H√†m l·∫•y d·ªØ li·ªáu COVID-19
# @st.cache_data(ttl=3600)  # Cache 1 gi·ªù
# def get_covid_data():
#     """L·∫•y d·ªØ li·ªáu COVID-19 t·ª´ API"""
#     try:
#         st.info("üåê ƒêang k·∫øt n·ªëi API ƒë·ªÉ l·∫•y d·ªØ li·ªáu COVID-19 ")
#         url = "https://disease.sh/v3/covid-19/countries"
#         response = requests.get(url, timeout=10)
#         data = response.json()
#         df = pd.DataFrame(data)
        
#         # ƒê·ªïi t√™n c·ªôt sang ti·∫øng Vi·ªát
#         column_mapping = {
#             'country': 'Qu·ªëc_Gia',
#             'cases': 'T·ªïng_Ca_Nhi·ªÖm', 
#             'deaths': 'T·ªïng_T·ª≠_Vong',
#             'recovered': 'T·ªïng_Kh·ªèi_B·ªánh',
#             'population': 'D√¢n_S·ªë',
#             'continent': 'Ch√¢u_L·ª•c'
#         }
#         df = df.rename(columns=column_mapping)
        
#         # T·∫°o c√°c c·ªôt t√≠nh to√°n
#         df['T·ªâ_L·ªá_T·ª≠_Vong'] = (df['T·ªïng_T·ª≠_Vong'] / df['T·ªïng_Ca_Nhi·ªÖm'] * 100).round(2)
#         df['T·ªâ_L·ªá_Kh·ªèi_B·ªánh'] = (df['T·ªïng_Kh·ªèi_B·ªánh'] / df['T·ªïng_Ca_Nhi·ªÖm'] * 100).round(2)
#         df['Ca_Nhi·ªÖm_Tri·ªáu_D√¢n'] = (df['T·ªïng_Ca_Nhi·ªÖm'] / df['D√¢n_S·ªë'] * 1000000).round(0)
#         df = df.fillna(0)
        
#         st.success(f"‚úÖ ƒê√£ t·∫£i d·ªØ li·ªáu t·ª´ {len(df)} qu·ªëc gia")
#         return df
        
#     except Exception as e:
#         st.error(f"‚ùå L·ªói k·∫øt n·ªëi API: {e}")
#         st.info("üîÑ ƒêang s·ª≠ d·ª•ng d·ªØ li·ªáu m·∫´u...")
        
#         # D·ªØ li·ªáu m·∫´u
#         sample_data = {
#             'Qu·ªëc_Gia': ['Vietnam', 'USA', 'India', 'Brazil', 'UK', 'Germany', 'France', 'Japan', 'Korea', 'Thailand'],
#             'T·ªïng_Ca_Nhi·ªÖm': [11500000, 100000000, 44000000, 34000000, 24000000, 32000000, 38000000, 22000000, 29000000, 4700000],
#             'T·ªïng_T·ª≠_Vong': [43000, 1100000, 530000, 680000, 190000, 150000, 155000, 46000, 31000, 33000],
#             'T·ªïng_Kh·ªèi_B·ªánh': [10600000, 95000000, 43000000, 33000000, 23000000, 31000000, 37000000, 21500000, 28500000, 4600000],
#             'D√¢n_S·ªë': [98170000, 331000000, 1393000000, 213900000, 68200000, 83100000, 67500000, 125800000, 51300000, 71600000],
#             'Ch√¢u_L·ª•c': ['Asia', 'North America', 'Asia', 'South America', 'Europe', 'Europe', 'Europe', 'Asia', 'Asia', 'Asia']
#         }
#         df = pd.DataFrame(sample_data)
#         df['T·ªâ_L·ªá_T·ª≠_Vong'] = (df['T·ªïng_T·ª≠_Vong'] / df['T·ªïng_Ca_Nhi·ªÖm'] * 100).round(2)
#         df['T·ªâ_L·ªá_Kh·ªèi_B·ªánh'] = (df['T·ªïng_Kh·ªèi_B·ªánh'] / df['T·ªïng_Ca_Nhi·ªÖm'] * 100).round(2)
#         df['Ca_Nhi·ªÖm_Tri·ªáu_D√¢n'] = (df['T·ªïng_Ca_Nhi·ªÖm'] / df['D√¢n_S·ªë'] * 1000000).round(0)
        
#         return df

# # T·∫£i d·ªØ li·ªáu
# df = get_covid_data()

# # Sidebar
# st.sidebar.header("‚öôÔ∏è C√ÄI ƒê·∫∂T PH√ÇN T√çCH")

# # L·ª±a ch·ªçn qu·ªëc gia ƒë·ªÉ so s√°nh
# countries = sorted(df['Qu·ªëc_Gia'].unique())
# selected_country = st.sidebar.selectbox("üáªüá≥ Ch·ªçn qu·ªëc gia ch√≠nh:", countries, index=countries.index('Vietnam') if 'Vietnam' in countries else 0)

# # L·ª±a ch·ªçn s·ªë qu·ªëc gia hi·ªÉn th·ªã
# top_n = st.sidebar.slider("S·ªë qu·ªëc gia hi·ªÉn th·ªã:", 5, 20, 10)

# # L·∫•y d·ªØ li·ªáu qu·ªëc gia ƒë∆∞·ª£c ch·ªçn
# country_data = df[df['Qu·ªëc_Gia'] == selected_country]

# # Tab ch√≠nh
# tab1, tab2, tab3, tab4, tab5 = st.tabs([
#     "üìä T·ªîNG QUAN", "üìà BI·ªÇU ƒê·ªí STATIC", "üé® BI·ªÇU ƒê·ªí T∆Ø∆†NG T√ÅC", 
#     "üìä BI·ªÇU ƒê·ªí B·ªî SUNG", "üìñ B√ÅO C√ÅO"
# ])

# with tab1:
#     st.header("üìä T·ªîNG QUAN COVID-19 TO√ÄN C·∫¶U")
    
#     # Metrics row
#     col1, col2, col3, col4 = st.columns(4)
    
#     with col1:
#         total_cases = df['T·ªïng_Ca_Nhi·ªÖm'].sum()
#         st.metric("üåç T·ªïng Ca Nhi·ªÖm", f"{total_cases:,.0f}")
    
#     with col2:
#         total_deaths = df['T·ªïng_T·ª≠_Vong'].sum()
#         st.metric("üíÄ T·ªïng T·ª≠ Vong", f"{total_deaths:,.0f}")
    
#     with col3:
#         avg_death_rate = df['T·ªâ_L·ªá_T·ª≠_Vong'].mean()
#         st.metric("üìà T·ªâ L·ªá T·ª≠ Vong TB", f"{avg_death_rate:.2f}%")
    
#     with col4:
#         total_countries = len(df)
#         st.metric("üá∫üá≥ S·ªë Qu·ªëc Gia", f"{total_countries}")
    
#     # Th√¥ng tin qu·ªëc gia ƒë∆∞·ª£c ch·ªçn
#     st.subheader(f"üáªüá≥ Th√¥ng Tin {selected_country}")
    
#     if len(country_data) > 0:
#         col1, col2, col3, col4 = st.columns(4)
        
#         with col1:
#             cases = country_data['T·ªïng_Ca_Nhi·ªÖm'].iloc[0]
#             st.metric("üò∑ T·ªïng Ca Nhi·ªÖm", f"{cases:,.0f}")
        
#         with col2:
#             deaths = country_data['T·ªïng_T·ª≠_Vong'].iloc[0]
#             st.metric("üíÄ T·ªïng T·ª≠ Vong", f"{deaths:,.0f}")
        
#         with col3:
#             death_rate = country_data['T·ªâ_L·ªá_T·ª≠_Vong'].iloc[0]
#             world_avg = df['T·ªâ_L·ªá_T·ª≠_Vong'].mean()
#             diff = death_rate - world_avg
#             st.metric("üìä T·ªâ L·ªá T·ª≠ Vong", f"{death_rate:.2f}%", f"{diff:+.2f}% vs TB")
        
#         with col4:
#             cases_per_million = country_data['Ca_Nhi·ªÖm_Tri·ªáu_D√¢n'].iloc[0]
#             st.metric("üë• Ca/1M D√¢n", f"{cases_per_million:,.0f}")
    
#     # D·ªØ li·ªáu th√¥
#     st.subheader("üìã D·ªØ Li·ªáu Th√¥ (10 d√≤ng ƒë·∫ßu)")
#     st.dataframe(df.head(10), use_container_width=True)

# with tab2:
#     st.header("üìä BI·ªÇU ƒê·ªí STATIC - Y√äU C·∫¶U 3")
    
#     # Y√äU C·∫¶U 3.1: Histogram & Boxplot
#     st.subheader("1. Histogram & Boxplot - Ph√¢n Ph·ªëi T·ªâ L·ªá T·ª≠ Vong")
    
#     fig, (ax1, ax2) = plt.subplots(1, 2, figsize=(15, 5))
    
#     # Histogram
#     ax1.hist(df['T·ªâ_L·ªá_T·ª≠_Vong'], bins=20, color='lightcoral', edgecolor='black', alpha=0.7)
#     ax1.axvline(df['T·ªâ_L·ªá_T·ª≠_Vong'].mean(), color='red', linestyle='--', linewidth=2, 
#                 label=f'Trung b√¨nh: {df["T·ªâ_L·ªá_T·ª≠_Vong"].mean():.2f}%')
#     if len(country_data) > 0:
#         ax1.axvline(country_data['T·ªâ_L·ªá_T·ª≠_Vong'].iloc[0], color='blue', linestyle='--', linewidth=2, 
#                     label=f'{selected_country}: {country_data["T·ªâ_L·ªá_T·ª≠_Vong"].iloc[0]:.2f}%')
#     ax1.set_xlabel('T·ªâ L·ªá T·ª≠ Vong (%)')
#     ax1.set_ylabel('S·ªë Qu·ªëc Gia')
#     ax1.set_title('PH√ÇN B·ªê T·ªà L·ªÜ T·ª¨ VONG TO√ÄN C·∫¶U', fontweight='bold')
#     ax1.legend()
#     ax1.grid(True, alpha=0.3)
    
#     # Boxplot
#     ax2.boxplot(df['T·ªâ_L·ªá_T·ª≠_Vong'].dropna())
#     ax2.set_ylabel('T·ªâ L·ªá T·ª≠ Vong (%)')
#     ax2.set_title('BOXPLOT T·ªà L·ªÜ T·ª¨ VONG', fontweight='bold')
#     ax2.grid(True, alpha=0.3)
    
#     plt.tight_layout()
#     st.pyplot(fig)
    
#     # Y√äU C·∫¶U 3.2: Line & Area Chart
#     st.subheader("2. Bi·ªÉu ƒê·ªì Top Qu·ªëc Gia Theo S·ªë Ca Nhi·ªÖm")
    
#     top_countries = df.nlargest(top_n, 'T·ªïng_Ca_Nhi·ªÖm')
    
#     fig, (ax1, ax2) = plt.subplots(2, 1, figsize=(12, 8))
    
#     # Line chart
#     ax1.plot(top_countries['Qu·ªëc_Gia'], top_countries['T·ªïng_Ca_Nhi·ªÖm'], 
#              marker='o', linewidth=2, markersize=6, color='#FF6B6B')
#     ax1.set_title(f'TOP {top_n} QU·ªêC GIA THEO S·ªê CA NHI·ªÑM', fontweight='bold')
#     ax1.set_ylabel('T·ªïng Ca Nhi·ªÖm')
#     ax1.tick_params(axis='x', rotation=45)
#     ax1.grid(True, alpha=0.3)
    
#     # Area chart
#     ax2.fill_between(top_countries['Qu·ªëc_Gia'], top_countries['T·ªïng_T·ª≠_Vong'], 
#                      alpha=0.3, color='#4ECDC4')
#     ax2.plot(top_countries['Qu·ªëc_Gia'], top_countries['T·ªïng_T·ª≠_Vong'], 
#              color='#4ECDC4', linewidth=2, marker='o')
#     ax2.set_title(f'TOP {top_n} QU·ªêC GIA THEO S·ª¨ T·ª¨ VONG', fontweight='bold')
#     ax2.set_xlabel('Qu·ªëc Gia')
#     ax2.set_ylabel('T·ªïng T·ª≠ Vong')
#     ax2.tick_params(axis='x', rotation=45)
#     ax2.grid(True, alpha=0.3)
    
#     plt.tight_layout()
#     st.pyplot(fig)
    
#     # Y√äU C·∫¶U 3.3: Scatter + Regression
#     st.subheader("3. Scatter Plot & H·ªìi Quy - M·ªëi Quan H·ªá Ca Nhi·ªÖm & T·ª≠ Vong")
    
#     fig, ax = plt.subplots(figsize=(10, 6))
    
#     scatter = ax.scatter(df['T·ªïng_Ca_Nhi·ªÖm'], df['T·ªïng_T·ª≠_Vong'], 
#                         alpha=0.6, s=50, c=df['T·ªâ_L·ªá_T·ª≠_Vong'], cmap='viridis')
    
#     # Regression line
#     if len(df) > 1:
#         z = np.polyfit(df['T·ªïng_Ca_Nhi·ªÖm'], df['T·ªïng_T·ª≠_Vong'], 1)
#         p = np.poly1d(z)
#         ax.plot(df['T·ªïng_Ca_Nhi·ªÖm'], p(df['T·ªïng_Ca_Nhi·ªÖm']), "r--", alpha=0.8, linewidth=2)
    
#     ax.set_xlabel('T·ªïng Ca Nhi·ªÖm')
#     ax.set_ylabel('T·ªïng T·ª≠ Vong')
#     ax.set_title('M·ªêI QUAN H·ªÜ GI·ªÆA CA NHI·ªÑM V√Ä T·ª¨ VONG', fontweight='bold')
#     ax.grid(True, alpha=0.3)
#     plt.colorbar(scatter, label='T·ªâ L·ªá T·ª≠ Vong (%)')
    
#     st.pyplot(fig)
    
#     # Y√äU C·∫¶U 3.4: Heatmap
#     st.subheader("4. Heatmap T∆∞∆°ng Quan")
    
#     numeric_cols = ['T·ªïng_Ca_Nhi·ªÖm', 'T·ªïng_T·ª≠_Vong', 'T·ªïng_Kh·ªèi_B·ªánh', 'D√¢n_S·ªë', 'T·ªâ_L·ªá_T·ª≠_Vong']
#     correlation_matrix = df[numeric_cols].corr()
    
#     fig, ax = plt.subplots(figsize=(8, 6))
#     sns.heatmap(correlation_matrix, annot=True, cmap='coolwarm', center=0,
#                square=True, fmt='.2f', cbar_kws={'shrink': 0.8}, ax=ax)
#     ax.set_title('HEATMAP T∆Ø∆†NG QUAN C√ÅC CH·ªà S·ªê COVID-19', fontweight='bold', pad=20)
    
#     st.pyplot(fig)

# with tab3:
#     st.header("üé® BI·ªÇU ƒê·ªí T∆Ø∆†NG T√ÅC - Y√äU C·∫¶U 4")
    
#     # Y√äU C·∫¶U 4.1: Scatter plot t∆∞∆°ng t√°c
#     st.subheader("1. Scatter Plot T∆∞∆°ng T√°c")
    
#     fig = px.scatter(df, x='T·ªïng_Ca_Nhi·ªÖm', y='T·ªïng_T·ª≠_Vong', 
#                      size='D√¢n_S·ªë', color='Ch√¢u_L·ª•c',
#                      hover_name='Qu·ªëc_Gia', 
#                      title='<b>M·ªêI QUAN H·ªÜ GI·ªÆA T·ªîNG CA NHI·ªÑM V√Ä T·ª¨ VONG</b>',
#                      labels={
#                          'T·ªïng_Ca_Nhi·ªÖm': 'T·ªïng Ca Nhi·ªÖm',
#                          'T·ªïng_T·ª≠_Vong': 'T·ªïng T·ª≠ Vong', 
#                          'Ch√¢u_L·ª•c': 'Ch√¢u L·ª•c',
#                          'D√¢n_S·ªë': 'D√¢n S·ªë'
#                      })
    
#     # Highlight qu·ªëc gia ƒë∆∞·ª£c ch·ªçn
#     if len(country_data) > 0:
#         fig.add_trace(go.Scatter(
#             x=country_data['T·ªïng_Ca_Nhi·ªÖm'],
#             y=country_data['T·ªïng_T·ª≠_Vong'],
#             mode='markers+text',
#             marker=dict(size=20, color='red', symbol='star'),
#             text=[selected_country],
#             textposition="top center",
#             name=selected_country
#         ))
    
#     fig.update_layout(template='plotly_white', height=500)
#     st.plotly_chart(fig, use_container_width=True)
    
#     # Y√äU C·∫¶U 4.2: Bar chart t∆∞∆°ng t√°c
#     st.subheader("2. Bar Chart So S√°nh Theo Ch√¢u L·ª•c")
    
#     continent_data = df.groupby('Ch√¢u_L·ª•c').agg({
#         'T·ªïng_Ca_Nhi·ªÖm': 'sum',
#         'T·ªïng_T·ª≠_Vong': 'sum',
#         'Qu·ªëc_Gia': 'count'
#     }).reset_index()
    
#     continent_data['T·ªâ_L·ªá_T·ª≠_Vong'] = (continent_data['T·ªïng_T·ª≠_Vong'] / continent_data['T·ªïng_Ca_Nhi·ªÖm'] * 100).round(2)
    
#     fig = px.bar(continent_data, 
#                  x='Ch√¢u_L·ª•c', 
#                  y='T·ªâ_L·ªá_T·ª≠_Vong',
#                  color='T·ªâ_L·ªá_T·ª≠_Vong',
#                  title='<b>T·ªà L·ªÜ T·ª¨ VONG THEO CH√ÇU L·ª§C</b>',
#                  labels={
#                      'T·ªâ_L·ªá_T·ª≠_Vong': 'T·ªâ L·ªá T·ª≠ Vong (%)', 
#                      'Ch√¢u_L·ª•c': 'Ch√¢u L·ª•c'
#                  },
#                  text='T·ªâ_L·ªá_T·ª≠_Vong')
    
#     fig.update_traces(texttemplate='%{text:.2f}%', textposition='outside')
#     fig.update_layout(template='plotly_white', height=400, showlegend=False)
#     st.plotly_chart(fig, use_container_width=True)
    
#     # Y√äU C·∫¶U 4.3: Choropleth map t∆∞∆°ng t√°c
#     st.subheader("3. B·∫£n ƒê·ªì T·ªâ L·ªá T·ª≠ Vong To√†n C·∫ßu")
    
#     fig = px.choropleth(df, 
#                         locations='Qu·ªëc_Gia',
#                         locationmode='country names',
#                         color='T·ªâ_L·ªá_T·ª≠_Vong',
#                         hover_name='Qu·ªëc_Gia',
#                         hover_data={
#                             'T·ªïng_Ca_Nhi·ªÖm': ':,',
#                             'T·ªïng_T·ª≠_Vong': ':,', 
#                             'T·ªâ_L·ªá_T·ª≠_Vong': ':.2f'
#                         },
#                         color_continuous_scale='Reds',
#                         title='<b>B·∫¢N ƒê·ªí T·ªà L·ªÜ T·ª¨ VONG COVID-19 TO√ÄN C·∫¶U</b>',
#                         labels={'T·ªâ_L·ªá_T·ª≠_Vong': 'T·ªâ L·ªá T·ª≠ Vong (%)'})
    
#     fig.update_layout(template='plotly_white', height=500)
#     st.plotly_chart(fig, use_container_width=True)

# with tab4:
#     st.header("üìä BI·ªÇU ƒê·ªí B·ªî SUNG - Y√äU C·∫¶U 3.6")
    
#     # Thay th·∫ø WordCloud b·∫±ng Pie chart v√† Donut chart
#     st.subheader("Ph√¢n B·ªë S·ªë Ca Nhi·ªÖm Theo Ch√¢u L·ª•c")
    
#     continent_cases = df.groupby('Ch√¢u_L·ª•c')['T·ªïng_Ca_Nhi·ªÖm'].sum().reset_index()
    
#     fig, (ax1, ax2) = plt.subplots(1, 2, figsize=(15, 6))
    
#     # Pie chart
#     ax1.pie(continent_cases['T·ªïng_Ca_Nhi·ªÖm'], 
#             labels=continent_cases['Ch√¢u_L·ª•c'],
#             autopct='%1.1f%%',
#             colors=sns.color_palette("Set3"),
#             startangle=90)
#     ax1.set_title('PH√ÇN B·ªê CA NHI·ªÑM THEO CH√ÇU L·ª§C', fontweight='bold')
    
#     # Bar chart horizontal
#     continent_cases_sorted = continent_cases.sort_values('T·ªïng_Ca_Nhi·ªÖm', ascending=True)
#     ax2.barh(continent_cases_sorted['Ch√¢u_L·ª•c'], 
#              continent_cases_sorted['T·ªïng_Ca_Nhi·ªÖm'],
#              color=sns.color_palette("viridis", len(continent_cases)))
#     ax2.set_xlabel('T·ªïng Ca Nhi·ªÖm')
#     ax2.set_title('S·ªê CA NHI·ªÑM THEO CH√ÇU L·ª§C', fontweight='bold')
    
#     # Th√™m gi√° tr·ªã tr√™n c·ªôt
#     for i, v in enumerate(continent_cases_sorted['T·ªïng_Ca_Nhi·ªÖm']):
#         ax2.text(v + v*0.01, i, f'{v:,.0f}', va='center', fontweight='bold')
    
#     plt.tight_layout()
#     st.pyplot(fig)
    
#     # Bi·ªÉu ƒë·ªì t∆∞∆°ng t√°c b·ªï sung
#     st.subheader("So S√°nh T·ªâ L·ªá Kh·ªèi B·ªánh C√°c Qu·ªëc Gia")
    
#     top_recovery = df.nlargest(15, 'T·ªâ_L·ªá_Kh·ªèi_B·ªánh')
    
#     fig = px.bar(top_recovery,
#                  x='Qu·ªëc_Gia',
#                  y='T·ªâ_L·ªá_Kh·ªèi_B·ªánh',
#                  color='T·ªâ_L·ªá_Kh·ªèi_B·ªánh',
#                  title='<b>TOP 15 QU·ªêC GIA C√ì T·ªà L·ªÜ KH·ªéI B·ªÜNH CAO NH·∫§T</b>',
#                  labels={'T·ªâ_L·ªá_Kh·ªèi_B·ªánh': 'T·ªâ L·ªá Kh·ªèi B·ªánh (%)'},
#                  text='T·ªâ_L·ªá_Kh·ªèi_B·ªánh')
    
#     fig.update_traces(texttemplate='%{text:.1f}%', textposition='outside')
#     fig.update_layout(template='plotly_white', height=500, xaxis_tickangle=-45)
#     st.plotly_chart(fig, use_container_width=True)

# with tab5:
#     st.header("üìñ B√ÅO C√ÅO PH√ÇN T√çCH - Y√äU C·∫¶U 5")
    
#     # T·∫°o b√°o c√°o storytelling
#     if len(country_data) > 0:
#         country_death_rate = country_data['T·ªâ_L·ªá_T·ª≠_Vong'].iloc[0]
#         country_recovery_rate = country_data['T·ªâ_L·ªá_Kh·ªèi_B·ªánh'].iloc[0] if 'T·ªâ_L·ªá_Kh·ªèi_B·ªánh' in country_data.columns else 0
#         country_cases_per_million = country_data['Ca_Nhi·ªÖm_Tri·ªáu_D√¢n'].iloc[0]
#         world_avg_death_rate = df['T·ªâ_L·ªá_T·ª≠_Vong'].mean()
#         world_avg_cases_per_million = df['Ca_Nhi·ªÖm_Tri·ªáu_D√¢n'].mean()
#     else:
#         country_death_rate = country_recovery_rate = world_avg_death_rate = world_avg_cases_per_million = 0
    
#     storytelling_content = f"""
#     # üìä B√ÅO C√ÅO PH√ÇN T√çCH COVID-19
#     ## {selected_country.upper()} TRONG B·ªêI C·∫¢NH TO√ÄN C·∫¶U

#     **Th√¥ng tin sinh vi√™n:** Nguy·ªÖn M·∫°nh D≈©ng - B22DCCN132  
#     **M√¥n h·ªçc:** Khai ph√° d·ªØ li·ªáu  
#     **Ng√†y t·∫°o b√°o c√°o:** {datetime.now().strftime('%d/%m/%Y %H:%M')}

#     ---

#     ### üìä T·ªîNG QUAN D·ªÆ LI·ªÜU
#     - **S·ªë qu·ªëc gia ph√¢n t√≠ch:** {len(df)}
#     - **T·ªïng s·ªë ca nhi·ªÖm to√†n c·∫ßu:** {df['T·ªïng_Ca_Nhi·ªÖm'].sum():,}
#     - **T·ªïng s·ªë t·ª≠ vong to√†n c·∫ßu:** {df['T·ªïng_T·ª≠_Vong'].sum():,}
#     - **T·ªâ l·ªá t·ª≠ vong trung b√¨nh:** {df['T·ªâ_L·ªá_T·ª≠_Vong'].mean():.2f}%

#     ### üáªüá≥ ƒê√ÅNH GI√Å T√åNH H√åNH {selected_country.upper()}

#     #### üìà CH·ªà S·ªê CH√çNH:
#     - **T·ªïng ca nhi·ªÖm:** {country_data['T·ªïng_Ca_Nhi·ªÖm'].iloc[0] if len(country_data) > 0 else 'N/A':,}
#     - **T·ªïng t·ª≠ vong:** {country_data['T·ªïng_T·ª≠_Vong'].iloc[0] if len(country_data) > 0 else 'N/A':,}
#     - **T·ªâ l·ªá t·ª≠ vong:** {country_death_rate:.2f}% ({'TH·∫§P H∆†N' if country_death_rate < world_avg_death_rate else 'CAO H∆†N'} trung b√¨nh th·∫ø gi·ªõi)
#     - **T·ªâ l·ªá kh·ªèi b·ªánh:** {country_recovery_rate:.1f}%
#     - **Ca nhi·ªÖm/1 tri·ªáu d√¢n:** {country_cases_per_million:,.0f} ca

#     #### üìä SO S√ÅNH V·ªöI TRUNG B√åNH TH·∫æ GI·ªöI:
#     | Ch·ªâ S·ªë | {selected_country} | Trung B√¨nh Th·∫ø Gi·ªõi | Ch√™nh L·ªách |
#     |--------|-------------------|-------------------|------------|
#     | T·ªâ l·ªá t·ª≠ vong | {country_death_rate:.2f}% | {world_avg_death_rate:.2f}% | {country_death_rate - world_avg_death_rate:+.2f}% |
#     | Ca/1M d√¢n | {country_cases_per_million:,.0f} | {world_avg_cases_per_million:,.0f} | {country_cases_per_million - world_avg_cases_per_million:+,.0f} |

#     ### üîç PH√ÇN T√çCH CHUY√äN S√ÇU

#     #### üìà XU H∆Ø·ªöNG TO√ÄN C·∫¶U:
#     - Ph√¢n b·ªë t·ªâ l·ªá t·ª≠ vong **kh√¥ng ƒë·ªìng ƒë·ªÅu** gi·ªØa c√°c qu·ªëc gia
#     - M·ªëi t∆∞∆°ng quan m·∫°nh gi·ªØa **t·ªïng ca nhi·ªÖm** v√† **t·ªïng t·ª≠ vong**
#     - C√°c n∆∞·ªõc ph√°t tri·ªÉn c√≥ h·ªá th·ªëng y t·∫ø t·ªët th∆∞·ªùng c√≥ **t·ªâ l·ªá t·ª≠ vong th·∫•p h∆°n**

#     #### üéØ ƒê√ÅNH GI√Å {selected_country.upper()}:
#     - **ƒêi·ªÉm m·∫°nh:** {'T·ªâ l·ªá t·ª≠ vong th·∫•p' if country_death_rate < world_avg_death_rate else 'C·∫ßn c·∫£i thi·ªán h·ªá th·ªëng y t·∫ø'}
#     - **Th√°ch th·ª©c:** {'Ki·ªÉm so√°t s·ªë ca nhi·ªÖm' if country_cases_per_million > world_avg_cases_per_million else 'Duy tr√¨ th√†nh t√≠ch'}

#     ### üí° KHUY·∫æN NGH·ªä

#     #### ƒê·ªêI V·ªöI {selected_country.upper()}:
#     1. **Duy tr√¨ h·ªá th·ªëng gi√°m s√°t d·ªãch t·ªÖ**
#     2. **TƒÉng c∆∞·ªùng nƒÉng l·ª±c x√©t nghi·ªám v√† ƒëi·ªÅu tr·ªã**
#     3. **Chu·∫©n b·ªã s·∫µn s√†ng cho c√°c bi·∫øn ch·ªßng m·ªõi**

#     #### B√ÄI H·ªåC TO√ÄN C·∫¶U:
#     1. **Minh b·∫°ch d·ªØ li·ªáu** l√† ch√¨a kh√≥a ki·ªÉm so√°t d·ªãch
#     2. **H·ª£p t√°c qu·ªëc t·∫ø** trong nghi√™n c·ª©u v√† ph√°t tri·ªÉn vaccine
#     3. **·ª®ng d·ª•ng c√¥ng ngh·ªá** trong truy v·∫øt v√† gi√°m s√°t

#     ---
#     *B√°o c√°o ƒë∆∞·ª£c t·∫°o t·ª± ƒë·ªông t·ª´ d·ªØ li·ªáu th·ª±c t·∫ø - C√≥ th·ªÉ refresh ƒë·ªÉ c·∫≠p nh·∫≠t*
#     """
    
#     st.markdown(storytelling_content)
    
#     # N√∫t export b√°o c√°o
#     if st.button("üì• Export B√°o C√°o"):
#         with open(f'bao_cao_covid19_{datetime.now().strftime("%Y%m%d_%H%M")}.md', 'w', encoding='utf-8') as f:
#             f.write(storytelling_content)
#         st.success("‚úÖ ƒê√£ xu·∫•t b√°o c√°o!")

# # Footer
# st.markdown("---")
# st.markdown(
#     "**B√†i t·∫≠p gi·ªØa k·ª≥ - M√¥n Khai ph√° d·ªØ li·ªáu** ‚Ä¢ "
#     "**Nguy·ªÖn M·∫°nh D≈©ng - B22DCCN132** ‚Ä¢ "
#     "**PTIT - 2024**"
# )
import streamlit as st
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
import plotly.express as px
import plotly.graph_objects as go
import requests
from datetime import datetime
import warnings
warnings.filterwarnings('ignore')
import networkx as nx
from sklearn.preprocessing import StandardScaler
from sklearn.cluster import KMeans
import scipy.stats as stats

# C·∫•u h√¨nh page
st.set_page_config(
    page_title="Ph√¢n T√≠ch COVID-19 - B22DCCN132",
    page_icon="ü¶†",
    layout="wide",
    initial_sidebar_state="expanded"
)

# Custom CSS
st.markdown("""
<style>
    .main-header {
        font-size: 3rem;
        color: #FF6B6B;
        text-align: center;
        margin-bottom: 2rem;
    }
    .metric-card {
        background-color: #262730;
        padding: 1rem;
        border-radius: 10px;
        border-left: 4px solid #FF6B6B;
        margin: 0.5rem 0;
    }
    .positive {
        color: #00FF00;
    }
    .negative {
        color: #FF6B6B;
    }
    .insight-box {
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        padding: 1.5rem;
        border-radius: 10px;
        margin: 1rem 0;
        color: white;
    }
    .stat-card {
        background: #1E1E1E;
        padding: 1rem;
        border-radius: 8px;
        border-left: 4px solid #FF6B6B;
        margin: 0.5rem 0;
    }
</style>
""", unsafe_allow_html=True)

# Ti√™u ƒë·ªÅ ·ª©ng d·ª•ng
st.markdown('<h1 class="main-header">ü¶† PH√ÇN T√çCH COVID-19 TO√ÄN C·∫¶U</h1>', unsafe_allow_html=True)
st.markdown("**Sinh vi√™n:** Nguy·ªÖn M·∫°nh D≈©ng - **MSSV:** B22DCCN132 - **M√¥n:** Khai ph√° d·ªØ li·ªáu")
st.markdown("---")

# H√†m l·∫•y d·ªØ li·ªáu COVID-19
@st.cache_data(ttl=3600)
def get_covid_data():
    """L·∫•y d·ªØ li·ªáu COVID-19 t·ª´ API"""
    try:
        st.info("üåê ƒêang k·∫øt n·ªëi API ƒë·ªÉ l·∫•y d·ªØ li·ªáu COVID-19...")
        url = "https://disease.sh/v3/covid-19/countries"
        response = requests.get(url, timeout=10)
        data = response.json()
        df = pd.DataFrame(data)
        
        # ƒê·ªïi t√™n c·ªôt sang ti·∫øng Vi·ªát
        column_mapping = {
            'country': 'Qu·ªëc_Gia',
            'cases': 'T·ªïng_Ca_Nhi·ªÖm', 
            'deaths': 'T·ªïng_T·ª≠_Vong',
            'recovered': 'T·ªïng_Kh·ªèi_B·ªánh',
            'population': 'D√¢n_S·ªë',
            'continent': 'Ch√¢u_L·ª•c',
            'todayCases': 'Ca_M·ªõi',
            'todayDeaths': 'T·ª≠_Vong_M·ªõi',
            'active': 'ƒêang_ƒêi·ªÅu_Tri'
        }
        df = df.rename(columns=column_mapping)
        
        # T·∫°o c√°c c·ªôt t√≠nh to√°n
        df['T·ªâ_L·ªá_T·ª≠_Vong'] = (df['T·ªïng_T·ª≠_Vong'] / df['T·ªïng_Ca_Nhi·ªÖm'] * 100).round(2)
        df['T·ªâ_L·ªá_Kh·ªèi_B·ªánh'] = (df['T·ªïng_Kh·ªèi_B·ªánh'] / df['T·ªïng_Ca_Nhi·ªÖm'] * 100).round(2)
        df['Ca_Nhi·ªÖm_Tri·ªáu_D√¢n'] = (df['T·ªïng_Ca_Nhi·ªÖm'] / df['D√¢n_S·ªë'] * 1000000).round(0)
        df['T·ªâ_L·ªá_ƒêang_ƒêi·ªÅu_Tri'] = (df['ƒêang_ƒêi·ªÅu_Tri'] / df['T·ªïng_Ca_Nhi·ªÖm'] * 100).round(2)
        
        # X·ª≠ l√Ω gi√° tr·ªã NaN v√† v√¥ c·ª±c
        df = df.replace([np.inf, -np.inf], np.nan)
        df = df.fillna(0)
        
        # Th√™m c·ªôt ph√¢n lo·∫°i m·ª©c ƒë·ªô ·∫£nh h∆∞·ªüng
        conditions = [
            df['T·ªâ_L·ªá_T·ª≠_Vong'] < 1,
            df['T·ªâ_L·ªá_T·ª≠_Vong'] < 2,
            df['T·ªâ_L·ªá_T·ª≠_Vong'] < 5,
            df['T·ªâ_L·ªá_T·ª≠_Vong'] >= 5
        ]
        choices = ['R·∫•t Th·∫•p', 'Th·∫•p', 'Trung B√¨nh', 'Cao']
        df['M·ª©c_ƒê·ªô_·∫¢nh_H∆∞·ªüng'] = np.select(conditions, choices, default='Kh√¥ng X√°c ƒê·ªãnh')
        
        st.success(f"‚úÖ ƒê√£ t·∫£i d·ªØ li·ªáu t·ª´ {len(df)} qu·ªëc gia")
        return df
        
    except Exception as e:
        st.error(f"‚ùå L·ªói k·∫øt n·ªëi API: {e}")
        st.info("üîÑ ƒêang s·ª≠ d·ª•ng d·ªØ li·ªáu m·∫´u...")
        
        # D·ªØ li·ªáu m·∫´u chi ti·∫øt h∆°n
        sample_data = {
            'Qu·ªëc_Gia': ['Vietnam', 'USA', 'India', 'Brazil', 'UK', 'Germany', 'France', 'Japan', 'Korea', 'Thailand', 
                        'Italy', 'Russia', 'Turkey', 'Spain', 'Argentina', 'Colombia', 'Mexico', 'Indonesia', 'Philippines', 'Malaysia'],
            'T·ªïng_Ca_Nhi·ªÖm': [11500000, 100000000, 44000000, 34000000, 24000000, 32000000, 38000000, 22000000, 29000000, 4700000,
                            25000000, 21000000, 17000000, 13000000, 9500000, 6300000, 7200000, 6800000, 4000000, 5000000],
            'T·ªïng_T·ª≠_Vong': [43000, 1100000, 530000, 680000, 190000, 150000, 155000, 46000, 31000, 33000,
                           180000, 380000, 100000, 110000, 130000, 140000, 330000, 160000, 64000, 37000],
            'T·ªïng_Kh·ªèi_B·ªánh': [10600000, 95000000, 43000000, 33000000, 23000000, 31000000, 37000000, 21500000, 28500000, 4600000,
                             24500000, 20500000, 16500000, 12700000, 9200000, 6100000, 6800000, 6500000, 3900000, 4900000],
            'D√¢n_S·ªë': [98170000, 331000000, 1393000000, 213900000, 68200000, 83100000, 67500000, 125800000, 51300000, 71600000,
                      59500000, 144000000, 84300000, 47300000, 45500000, 51100000, 128900000, 273500000, 111000000, 32700000],
            'Ch√¢u_L·ª•c': ['Asia', 'North America', 'Asia', 'South America', 'Europe', 'Europe', 'Europe', 'Asia', 'Asia', 'Asia',
                        'Europe', 'Europe', 'Asia', 'Europe', 'South America', 'South America', 'North America', 'Asia', 'Asia', 'Asia'],
            'Ca_M·ªõi': [1500, 25000, 8000, 12000, 5000, 7000, 9000, 3000, 4000, 800,
                      4000, 6000, 5000, 3000, 2000, 1500, 4000, 2500, 1200, 1000],
            'T·ª≠_Vong_M·ªõi': [12, 350, 120, 200, 45, 30, 40, 8, 6, 5,
                           25, 80, 30, 15, 20, 25, 60, 40, 15, 8],
            'ƒêang_ƒêi·ªÅu_Tri': [85000, 3500000, 470000, 320000, 110000, 85000, 85000, 45000, 47000, 37000,
                            220000, 120000, 50000, 19000, 17000, 6000, 70000, 24000, 36000, 6300]
        }
        df = pd.DataFrame(sample_data)
        
        # T√≠nh to√°n c√°c ch·ªâ s·ªë
        df['T·ªâ_L·ªá_T·ª≠_Vong'] = (df['T·ªïng_T·ª≠_Vong'] / df['T·ªïng_Ca_Nhi·ªÖm'] * 100).round(2)
        df['T·ªâ_L·ªá_Kh·ªèi_B·ªánh'] = (df['T·ªïng_Kh·ªèi_B·ªánh'] / df['T·ªïng_Ca_Nhi·ªÖm'] * 100).round(2)
        df['Ca_Nhi·ªÖm_Tri·ªáu_D√¢n'] = (df['T·ªïng_Ca_Nhi·ªÖm'] / df['D√¢n_S·ªë'] * 1000000).round(0)
        df['T·ªâ_L·ªá_ƒêang_ƒêi·ªÅu_Tri'] = (df['ƒêang_ƒêi·ªÅu_Tri'] / df['T·ªïng_Ca_Nhi·ªÖm'] * 100).round(2)
        
        # Th√™m c·ªôt ph√¢n lo·∫°i
        conditions = [
            df['T·ªâ_L·ªá_T·ª≠_Vong'] < 1,
            df['T·ªâ_L·ªá_T·ª≠_Vong'] < 2,
            df['T·ªâ_L·ªá_T·ª≠_Vong'] < 5,
            df['T·ªâ_L·ªá_T·ª≠_Vong'] >= 5
        ]
        choices = ['R·∫•t Th·∫•p', 'Th·∫•p', 'Trung B√¨nh', 'Cao']
        df['M·ª©c_ƒê·ªô_·∫¢nh_H∆∞·ªüng'] = np.select(conditions, choices, default='Kh√¥ng X√°c ƒê·ªãnh')
        
        return df

# T·∫£i d·ªØ li·ªáu
df = get_covid_data()

# Sidebar
st.sidebar.header("‚öôÔ∏è C√ÄI ƒê·∫∂T PH√ÇN T√çCH")

# L·ª±a ch·ªçn qu·ªëc gia ƒë·ªÉ so s√°nh
countries = sorted(df['Qu·ªëc_Gia'].unique())
selected_country = st.sidebar.selectbox("üáªüá≥ Ch·ªçn qu·ªëc gia ch√≠nh:", countries, 
                                       index=countries.index('Vietnam') if 'Vietnam' in countries else 0)

# L·ª±a ch·ªçn s·ªë qu·ªëc gia hi·ªÉn th·ªã
top_n = st.sidebar.slider("S·ªë qu·ªëc gia hi·ªÉn th·ªã:", 5, 20, 10)

# L·ª±a ch·ªçn ch√¢u l·ª•c
continents = ['T·∫•t C·∫£'] + sorted(df['Ch√¢u_L·ª•c'].unique().tolist())
selected_continent = st.sidebar.selectbox("üåç L·ªçc theo ch√¢u l·ª•c:", continents)

# L·ªçc d·ªØ li·ªáu theo ch√¢u l·ª•c
if selected_continent != 'T·∫•t C·∫£':
    df_filtered = df[df['Ch√¢u_L·ª•c'] == selected_continent]
else:
    df_filtered = df

# L·∫•y d·ªØ li·ªáu qu·ªëc gia ƒë∆∞·ª£c ch·ªçn
country_data = df[df['Qu·ªëc_Gia'] == selected_country]

# Tab ch√≠nh
tab1, tab2, tab3, tab4, tab5, tab6 = st.tabs([
    "üìä T·ªîNG QUAN", "üìà BI·ªÇU ƒê·ªí STATIC", "üé® BI·ªÇU ƒê·ªí T∆Ø∆†NG T√ÅC", 
    "üî¨ PH√ÇN T√çCH N√ÇNG CAO", "üìñ B√ÅO C√ÅO", "üîç INSIGHTS"
])

with tab1:
    st.header("üìä T·ªîNG QUAN COVID-19 TO√ÄN C·∫¶U")
    
    # Metrics row
    col1, col2, col3, col4 = st.columns(4)
    
    with col1:
        total_cases = df['T·ªïng_Ca_Nhi·ªÖm'].sum()
        st.metric("üåç T·ªïng Ca Nhi·ªÖm", f"{total_cases:,.0f}")
    
    with col2:
        total_deaths = df['T·ªïng_T·ª≠_Vong'].sum()
        st.metric("üíÄ T·ªïng T·ª≠ Vong", f"{total_deaths:,.0f}")
    
    with col3:
        avg_death_rate = df['T·ªâ_L·ªá_T·ª≠_Vong'].mean()
        st.metric("üìà T·ªâ L·ªá T·ª≠ Vong TB", f"{avg_death_rate:.2f}%")
    
    with col4:
        total_countries = len(df)
        st.metric("üá∫üá≥ S·ªë Qu·ªëc Gia", f"{total_countries}")
    
    # Th√¥ng tin qu·ªëc gia ƒë∆∞·ª£c ch·ªçn
    st.subheader(f"üáªüá≥ Th√¥ng Tin Chi Ti·∫øt: {selected_country}")
    
    if len(country_data) > 0:
        col1, col2, col3, col4 = st.columns(4)
        
        with col1:
            cases = country_data['T·ªïng_Ca_Nhi·ªÖm'].iloc[0]
            new_cases = country_data['Ca_M·ªõi'].iloc[0] if 'Ca_M·ªõi' in country_data.columns else 0
            st.metric("üò∑ T·ªïng Ca Nhi·ªÖm", f"{cases:,.0f}", f"+{new_cases:,.0f}")
        
        with col2:
            deaths = country_data['T·ªïng_T·ª≠_Vong'].iloc[0]
            new_deaths = country_data['T·ª≠_Vong_M·ªõi'].iloc[0] if 'T·ª≠_Vong_M·ªõi' in country_data.columns else 0
            st.metric("üíÄ T·ªïng T·ª≠ Vong", f"{deaths:,.0f}", f"+{new_deaths:,.0f}")
        
        with col3:
            death_rate = country_data['T·ªâ_L·ªá_T·ª≠_Vong'].iloc[0]
            world_avg = df['T·ªâ_L·ªá_T·ª≠_Vong'].mean()
            diff = death_rate - world_avg
            st.metric("üìä T·ªâ L·ªá T·ª≠ Vong", f"{death_rate:.2f}%", f"{diff:+.2f}% vs TB")
        
        with col4:
            cases_per_million = country_data['Ca_Nhi·ªÖm_Tri·ªáu_D√¢n'].iloc[0]
            st.metric("üë• Ca/1M D√¢n", f"{cases_per_million:,.0f}")
    
    # D·ªØ li·ªáu th√¥
    st.subheader("üìã D·ªÆ LI·ªÜU TH√î (10 d√≤ng ƒë·∫ßu)")
    st.dataframe(df.head(10), use_container_width=True)
    
    # PH·∫¶N M·ªöI: CHI TI·∫æT X·ª¨ L√ù D·ªÆ LI·ªÜU
    st.subheader("üîß CHI TI·∫æT X·ª¨ L√ù D·ªÆ LI·ªÜU")
    
    col1, col2, col3 = st.columns(3)
    
    with col1:
        st.markdown("""
        <div style='background: #1E1E1E; padding: 1rem; border-radius: 10px; border-left: 4px solid #4CAF50; margin: 0.5rem 0;'>
        <h4>üîÑ CHU·∫®N H√ìA KI·ªÇU D·ªÆ LI·ªÜU</h4>
        <p><strong>Th·ª±c hi·ªán:</strong></p>
        <ul style='margin-bottom: 0;'>
        <li><strong>T√™n c·ªôt:</strong> EN ‚Üí VI (country ‚Üí Qu·ªëc_Gia)</li>
        <li><strong>Ki·ªÉu s·ªë:</strong> int64 cho s·ªë nguy√™n</li>
        <li><strong>Ki·ªÉu float:</strong> float64 cho t·ªâ l·ªá %</li>
        <li><strong>Ki·ªÉu chu·ªói:</strong> object cho t√™n, ch√¢u l·ª•c</li>
        <li><strong>L√†m tr√≤n:</strong> 2 ch·ªØ s·ªë th·∫≠p ph√¢n</li>
        </ul>
        </div>
        """, unsafe_allow_html=True)
    
    with col2:
        # Th·ªëng k√™ d·ªØ li·ªáu thi·∫øu
        missing_data = df.isnull().sum()
        total_cells = np.product(df.shape)
        total_missing = missing_data.sum()
        missing_percentage = (total_missing / total_cells) * 100
        
        st.markdown(f"""
        <div style='background: #1E1E1E; padding: 1rem; border-radius: 10px; border-left: 4px solid #FF9800; margin: 0.5rem 0;'>
        <h4>üéØ X·ª¨ L√ù D·ªÆ LI·ªÜU THI·∫æU</h4>
        <p><strong>Th·ªëng k√™:</strong></p>
        <ul style='margin-bottom: 0;'>
        <li><strong>T·ªïng √¥ d·ªØ li·ªáu:</strong> {total_cells:,}</li>
        <li><strong>√î b·ªã thi·∫øu:</strong> {total_missing:,}</li>
        <li><strong>T·ªâ l·ªá thi·∫øu:</strong> {missing_percentage:.2f}%</li>
        <li><strong>Gi·∫£i ph√°p:</strong> Thay th·∫ø b·∫±ng 0</li>
        <li><strong>X·ª≠ l√Ω Infinity:</strong> Thay b·∫±ng NaN ‚Üí 0</li>
        </ul>
        </div>
        """, unsafe_allow_html=True)
    
    with col3:
        st.markdown("""
        <div style='background: #1E1E1E; padding: 1rem; border-radius: 10px; border-left: 4px solid #2196F3; margin: 0.5rem 0;'>
        <h4>üöÄ T·∫†O C·ªòT ƒê·∫∂C TR∆ØNG M·ªöI</h4>
        <p><strong>C√°c c·ªôt ƒë∆∞·ª£c t·∫°o:</strong></p>
        <ul style='margin-bottom: 0;'>
        <li><strong>T·ªâ_L·ªá_T·ª≠_Vong:</strong> (T·ª≠ vong/Ca nhi·ªÖm) √ó 100</li>
        <li><strong>T·ªâ_L·ªá_Kh·ªèi_B·ªánh:</strong> (Kh·ªèi b·ªánh/Ca nhi·ªÖm) √ó 100</li>
        <li><strong>Ca_Nhi·ªÖm_Tri·ªáu_D√¢n:</strong> (Ca nhi·ªÖm/D√¢n s·ªë) √ó 1M</li>
        <li><strong>T·ªâ_L·ªá_ƒêang_ƒêi·ªÅu_Tri:</strong> (ƒêang ƒëi·ªÅu tr·ªã/Ca nhi·ªÖm) √ó 100</li>
        <li><strong>M·ª©c_ƒê·ªô_·∫¢nh_H∆∞·ªüng:</strong> Ph√¢n lo·∫°i theo t·ªâ l·ªá t·ª≠ vong</li>
        </ul>
        </div>
        """, unsafe_allow_html=True)
    
    # B·∫¢NG TH·ªêNG K√ä CHI TI·∫æT
    with st.expander("üìä **B·∫¢NG TH·ªêNG K√ä CHI TI·∫æT X·ª¨ L√ù D·ªÆ LI·ªÜU**"):
        st.write("**Th√¥ng tin c·ªôt d·ªØ li·ªáu:**")
        
        # T·∫°o b·∫£ng th·ªëng k√™
        data_info = []
        for col in df.columns:
            data_info.append({
                'C·ªôt': col,
                'Ki·ªÉu d·ªØ li·ªáu': str(df[col].dtype),
                'S·ªë gi√° tr·ªã duy nh·∫•t': df[col].nunique(),
                'Gi√° tr·ªã thi·∫øu': df[col].isnull().sum(),
                'Gi√° tr·ªã thi·∫øu (%)': f"{(df[col].isnull().sum() / len(df)) * 100:.2f}%",
                'V√≠ d·ª• gi√° tr·ªã': str(df[col].iloc[0]) if len(df) > 0 else 'N/A'
            })
        
        info_df = pd.DataFrame(data_info)
        st.dataframe(info_df, use_container_width=True)
        
        # Th·ªëng k√™ s·ªë h·ªçc
        st.write("**Th·ªëng k√™ s·ªë h·ªçc cho c√°c c·ªôt numeric:**")
        numeric_cols = df.select_dtypes(include=[np.number]).columns
        if len(numeric_cols) > 0:
            st.dataframe(df[numeric_cols].describe(), use_container_width=True)
    
    # TH√îNG TIN V·ªÄ C√ÅC C·ªòT M·ªöI
    with st.expander("üîç **TH√îNG TIN C√ÅC C·ªòT ƒê·∫∂C TR∆ØNG M·ªöI**"):
        col1, col2 = st.columns(2)
        
        with col1:
            st.write("**üìà C√¥ng th·ª©c t√≠nh to√°n:**")
            st.write("- **T·ªâ_L·ªá_T·ª≠_Vong** = (T·ªïng_T·ª≠_Vong / T·ªïng_Ca_Nhi·ªÖm) √ó 100")
            st.write("- **T·ªâ_L·ªá_Kh·ªèi_B·ªánh** = (T·ªïng_Kh·ªèi_B·ªánh / T·ªïng_Ca_Nhi·ªÖm) √ó 100")
            st.write("- **Ca_Nhi·ªÖm_Tri·ªáu_D√¢n** = (T·ªïng_Ca_Nhi·ªÖm / D√¢n_S·ªë) √ó 1,000,000")
            st.write("- **T·ªâ_L·ªá_ƒêang_ƒêi·ªÅu_Tri** = (ƒêang_ƒêi·ªÅu_Tri / T·ªïng_Ca_Nhi·ªÖm) √ó 100")
        
        with col2:
            st.write("**üéØ Ph√¢n lo·∫°i M·ª©c_ƒê·ªô_·∫¢nh_H∆∞·ªüng:**")
            st.write("- **R·∫•t Th·∫•p**: T·ªâ l·ªá t·ª≠ vong < 1%")
            st.write("- **Th·∫•p**: T·ªâ l·ªá t·ª≠ vong 1-2%")
            st.write("- **Trung B√¨nh**: T·ªâ l·ªá t·ª≠ vong 2-5%")
            st.write("- **Cao**: T·ªâ l·ªá t·ª≠ vong ‚â• 5%")
        
        # Hi·ªÉn th·ªã ph√¢n b·ªë m·ª©c ƒë·ªô ·∫£nh h∆∞·ªüng
        st.write("**üìä Ph√¢n b·ªë M·ª©c_ƒê·ªô_·∫¢nh_H∆∞·ªüng:**")
        impact_distribution = df['M·ª©c_ƒê·ªô_·∫¢nh_H∆∞·ªüng'].value_counts()
        st.dataframe(impact_distribution, use_container_width=True)

with tab2:
    st.header("üìä BI·ªÇU ƒê·ªí STATIC - Y√äU C·∫¶U 3")
    
    col1, col2 = st.columns(2)
    
    with col1:
        # Y√äU C·∫¶U 3.1: Histogram & Boxplot
        st.subheader("1. Histogram & Boxplot - Ph√¢n Ph·ªëi T·ªâ L·ªá T·ª≠ Vong")
        
        fig, (ax1, ax2) = plt.subplots(2, 1, figsize=(10, 8))
        
        # Histogram
        ax1.hist(df_filtered['T·ªâ_L·ªá_T·ª≠_Vong'], bins=20, color='lightcoral', edgecolor='black', alpha=0.7, density=True)
        ax1.axvline(df_filtered['T·ªâ_L·ªá_T·ª≠_Vong'].mean(), color='red', linestyle='--', linewidth=2, 
                    label=f'Trung b√¨nh: {df_filtered["T·ªâ_L·ªá_T·ª≠_Vong"].mean():.2f}%')
        if len(country_data) > 0:
            ax1.axvline(country_data['T·ªâ_L·ªá_T·ª≠_Vong'].iloc[0], color='blue', linestyle='--', linewidth=2, 
                        label=f'{selected_country}: {country_data["T·ªâ_L·ªá_T·ª≠_Vong"].iloc[0]:.2f}%')
        ax1.set_xlabel('T·ªâ L·ªá T·ª≠ Vong (%)')
        ax1.set_ylabel('M·∫≠t ƒê·ªô')
        ax1.set_title('PH√ÇN B·ªê T·ªà L·ªÜ T·ª¨ VONG', fontweight='bold')
        ax1.legend()
        ax1.grid(True, alpha=0.3)
        
        # Boxplot
        ax2.boxplot(df_filtered['T·ªâ_L·ªá_T·ª≠_Vong'].dropna())
        ax2.set_ylabel('T·ªâ L·ªá T·ª≠ Vong (%)')
        ax2.set_title('BOXPLOT T·ªà L·ªÜ T·ª¨ VONG', fontweight='bold')
        ax2.grid(True, alpha=0.3)
        
        plt.tight_layout()
        st.pyplot(fig)
    
    with col2:
        # BI·ªÇU ƒê·ªí M·ªöI: Violin Plot
        st.subheader("2. Violin Plot - Ph√¢n Ph·ªëi Theo Ch√¢u L·ª•c")
        
        fig, ax = plt.subplots(figsize=(10, 6))
        sns.violinplot(data=df, x='Ch√¢u_L·ª•c', y='T·ªâ_L·ªá_T·ª≠_Vong', 
                      palette='Set2', ax=ax)
        ax.set_title('PH√ÇN PH·ªêI T·ªà L·ªÜ T·ª¨ VONG THEO CH√ÇU L·ª§C', fontweight='bold')
        ax.tick_params(axis='x', rotation=45)
        ax.set_ylabel('T·ªâ L·ªá T·ª≠ Vong (%)')
        ax.set_xlabel('Ch√¢u L·ª•c')
        plt.tight_layout()
        st.pyplot(fig)
    
    # Y√äU C·∫¶U 3.2: Line & Area Chart
    st.subheader("3. Line & Area Chart - Top Qu·ªëc Gia")
    
    top_countries = df_filtered.nlargest(top_n, 'T·ªïng_Ca_Nhi·ªÖm')
    
    fig, (ax1, ax2) = plt.subplots(2, 1, figsize=(12, 8))
    
    # Line chart
    ax1.plot(top_countries['Qu·ªëc_Gia'], top_countries['T·ªïng_Ca_Nhi·ªÖm'], 
             marker='o', linewidth=2, markersize=6, color='#FF6B6B')
    ax1.set_title(f'TOP {top_n} QU·ªêC GIA THEO S·ªê CA NHI·ªÑM', fontweight='bold')
    ax1.set_ylabel('T·ªïng Ca Nhi·ªÖm')
    ax1.tick_params(axis='x', rotation=45)
    ax1.grid(True, alpha=0.3)
    
    # Area chart
    ax2.fill_between(top_countries['Qu·ªëc_Gia'], top_countries['T·ªïng_T·ª≠_Vong'], 
                     alpha=0.3, color='#4ECDC4')
    ax2.plot(top_countries['Qu·ªëc_Gia'], top_countries['T·ªïng_T·ª≠_Vong'], 
             color='#4ECDC4', linewidth=2, marker='o')
    ax2.set_title(f'TOP {top_n} QU·ªêC GIA THEO T·ª¨ VONG', fontweight='bold')
    ax2.set_xlabel('Qu·ªëc Gia')
    ax2.set_ylabel('T·ªïng T·ª≠ Vong')
    ax2.tick_params(axis='x', rotation=45)
    ax2.grid(True, alpha=0.3)
    
    plt.tight_layout()
    st.pyplot(fig)
    
    col1, col2 = st.columns(2)
    
    with col1:
        # Y√äU C·∫¶U 3.3: Scatter + Regression
        st.subheader("4. Scatter Plot & H·ªìi Quy")
        
        fig, ax = plt.subplots(figsize=(10, 6))
        
        scatter = ax.scatter(df_filtered['T·ªïng_Ca_Nhi·ªÖm'], df_filtered['T·ªïng_T·ª≠_Vong'], 
                            alpha=0.6, s=50, c=df_filtered['T·ªâ_L·ªá_T·ª≠_Vong'], cmap='viridis')
        
        # Regression line
        if len(df_filtered) > 1:
            z = np.polyfit(df_filtered['T·ªïng_Ca_Nhi·ªÖm'], df_filtered['T·ªïng_T·ª≠_Vong'], 1)
            p = np.poly1d(z)
            ax.plot(df_filtered['T·ªïng_Ca_Nhi·ªÖm'], p(df_filtered['T·ªïng_Ca_Nhi·ªÖm']), "r--", alpha=0.8, linewidth=2)
            
            # T√≠nh h·ªá s·ªë t∆∞∆°ng quan
            correlation = np.corrcoef(df_filtered['T·ªïng_Ca_Nhi·ªÖm'], df_filtered['T·ªïng_T·ª≠_Vong'])[0,1]
            ax.text(0.05, 0.95, f'R = {correlation:.3f}', transform=ax.transAxes, 
                   fontsize=12, bbox=dict(boxstyle="round,pad=0.3", facecolor="white", alpha=0.8))
        
        ax.set_xlabel('T·ªïng Ca Nhi·ªÖm')
        ax.set_ylabel('T·ªïng T·ª≠ Vong')
        ax.set_title('M·ªêI QUAN H·ªÜ GI·ªÆA CA NHI·ªÑM V√Ä T·ª¨ VONG', fontweight='bold')
        ax.grid(True, alpha=0.3)
        plt.colorbar(scatter, label='T·ªâ L·ªá T·ª≠ Vong (%)')
        
        st.pyplot(fig)
    
    with col2:
        # Y√äU C·∫¶U 3.4: Heatmap
        st.subheader("5. Heatmap T∆∞∆°ng Quan")
        
        numeric_cols = ['T·ªïng_Ca_Nhi·ªÖm', 'T·ªïng_T·ª≠_Vong', 'T·ªïng_Kh·ªèi_B·ªánh', 'D√¢n_S·ªë', 'T·ªâ_L·ªá_T·ª≠_Vong', 'Ca_Nhi·ªÖm_Tri·ªáu_D√¢n']
        correlation_matrix = df_filtered[numeric_cols].corr()
        
        fig, ax = plt.subplots(figsize=(8, 6))
        sns.heatmap(correlation_matrix, annot=True, cmap='coolwarm', center=0,
                   square=True, fmt='.2f', cbar_kws={'shrink': 0.8}, ax=ax)
        ax.set_title('HEATMAP T∆Ø∆†NG QUAN C√ÅC CH·ªà S·ªê COVID-19', fontweight='bold', pad=20)
        
        st.pyplot(fig)

with tab3:
    st.header("üé® BI·ªÇU ƒê·ªí T∆Ø∆†NG T√ÅC - Y√äU C·∫¶U 4")
    
    col1, col2 = st.columns(2)
    
    with col1:
        # Y√äU C·∫¶U 4.1: Scatter plot t∆∞∆°ng t√°c
        st.subheader("1. Scatter Plot T∆∞∆°ng T√°c 3D")
        
        fig = px.scatter_3d(df, 
                           x='T·ªïng_Ca_Nhi·ªÖm', 
                           y='T·ªïng_T·ª≠_Vong', 
                           z='D√¢n_S·ªë',
                           size='T·ªâ_L·ªá_T·ª≠_Vong',
                           color='Ch√¢u_L·ª•c',
                           hover_name='Qu·ªëc_Gia',
                           title='<b>BI·ªÇU ƒê·ªí 3D: CA NHI·ªÑM - T·ª¨ VONG - D√ÇN S·ªê</b>',
                           labels={
                               'T·ªïng_Ca_Nhi·ªÖm': 'T·ªïng Ca Nhi·ªÖm',
                               'T·ªïng_T·ª≠_Vong': 'T·ªïng T·ª≠ Vong', 
                               'D√¢n_S·ªë': 'D√¢n S·ªë',
                               'Ch√¢u_L·ª•c': 'Ch√¢u L·ª•c'
                           })
        
        fig.update_layout(template='plotly_white', height=500)
        st.plotly_chart(fig, use_container_width=True)
    
    with col2:
        # Y√äU C·∫¶U 4.2: Sunburst Chart
        st.subheader("2. Sunburst Chart - Ph√¢n C·∫•p D·ªØ Li·ªáu")
        
        # Chu·∫©n b·ªã d·ªØ li·ªáu ph√¢n c·∫•p
        hierarchical_data = df[['Ch√¢u_L·ª•c', 'Qu·ªëc_Gia', 'T·ªïng_Ca_Nhi·ªÖm', 'T·ªâ_L·ªá_T·ª≠_Vong']].copy()
        
        fig = px.sunburst(
            hierarchical_data,
            path=['Ch√¢u_L·ª•c', 'Qu·ªëc_Gia'],
            values='T·ªïng_Ca_Nhi·ªÖm',
            color='T·ªâ_L·ªá_T·ª≠_Vong',
            color_continuous_scale='RdBu_r',
            title='<b>SUNBURST: PH√ÇN C·∫§P D·ªÆ LI·ªÜU COVID-19</b>',
            hover_data=['T·ªâ_L·ªá_T·ª≠_Vong']
        )
        fig.update_layout(height=500)
        st.plotly_chart(fig, use_container_width=True)
    
    # Y√äU C·∫¶U 4.3: Choropleth map t∆∞∆°ng t√°c
    st.subheader("3. B·∫£n ƒê·ªì T∆∞∆°ng T√°c To√†n C·∫ßu")
    
    col1, col2 = st.columns(2)
    
    with col1:
        fig1 = px.choropleth(df, 
                            locations='Qu·ªëc_Gia',
                            locationmode='country names',
                            color='T·ªâ_L·ªá_T·ª≠_Vong',
                            hover_name='Qu·ªëc_Gia',
                            hover_data={
                                'T·ªïng_Ca_Nhi·ªÖm': ':,',
                                'T·ªïng_T·ª≠_Vong': ':,', 
                                'T·ªâ_L·ªá_T·ª≠_Vong': ':.2f'
                            },
                            color_continuous_scale='Reds',
                            title='<b>B·∫¢N ƒê·ªí T·ªà L·ªÜ T·ª¨ VONG</b>',
                            labels={'T·ªâ_L·ªá_T·ª≠_Vong': 'T·ªâ L·ªá T·ª≠ Vong (%)'})
        
        fig1.update_layout(template='plotly_white', height=400)
        st.plotly_chart(fig1, use_container_width=True)
    
    with col2:
        fig2 = px.choropleth(df, 
                            locations='Qu·ªëc_Gia',
                            locationmode='country names',
                            color='Ca_Nhi·ªÖm_Tri·ªáu_D√¢n',
                            hover_name='Qu·ªëc_Gia',
                            hover_data={
                                'T·ªïng_Ca_Nhi·ªÖm': ':,',
                                'D√¢n_S·ªë': ':,', 
                                'Ca_Nhi·ªÖm_Tri·ªáu_D√¢n': ':,'
                            },
                            color_continuous_scale='Blues',
                            title='<b>B·∫¢N ƒê·ªí CA NHI·ªÑM/1 TRI·ªÜU D√ÇN</b>',
                            labels={'Ca_Nhi·ªÖm_Tri·ªáu_D√¢n': 'Ca/1M D√¢n'})
        
        fig2.update_layout(template='plotly_white', height=400)
        st.plotly_chart(fig2, use_container_width=True)
    
    # BI·ªÇU ƒê·ªí M·ªöI: Parallel Categories
    st.subheader("4. Parallel Categories - ƒêa Chi·ªÅu")
    
    fig = px.parallel_categories(
        df,
        dimensions=['Ch√¢u_L·ª•c', 'M·ª©c_ƒê·ªô_·∫¢nh_H∆∞·ªüng'],
        color='T·ªâ_L·ªá_T·ª≠_Vong',
        color_continuous_scale=px.colors.sequential.Inferno,
        title='<b>PH√ÇN T√çCH ƒêA CHI·ªÄU: CH√ÇU L·ª§C - M·ª®C ƒê·ªò ·∫¢NH H∆Ø·ªûNG</b>'
    )
    fig.update_layout(height=400)
    st.plotly_chart(fig, use_container_width=True)

with tab4:
    st.header("üî¨ PH√ÇN T√çCH N√ÇNG CAO")
    
    col1, col2 = st.columns(2)
    
    with col1:
        # PH√ÇN C·ª§M K-Means
        st.subheader("1. Ph√¢n C·ª•m Qu·ªëc Gia Theo ƒê·∫∑c ƒêi·ªÉm D·ªãch T·ªÖ")
        
        # Chu·∫©n b·ªã d·ªØ li·ªáu cho clustering
        features = df[['T·ªâ_L·ªá_T·ª≠_Vong', 'Ca_Nhi·ªÖm_Tri·ªáu_D√¢n', 'T·ªâ_L·ªá_Kh·ªèi_B·ªánh']].dropna()
        
        if len(features) >= 3:
            # Chu·∫©n h√≥a d·ªØ li·ªáu
            scaler = StandardScaler()
            features_scaled = scaler.fit_transform(features)
            
            # Ph√¢n c·ª•m K-means
            kmeans = KMeans(n_clusters=4, random_state=42)
            clusters = kmeans.fit_predict(features_scaled)
            
            # Th√™m nh√£n c·ª•m v√†o dataframe
            df_clustered = df.loc[features.index].copy()
            df_clustered['C·ª•m'] = clusters
            
            fig = px.scatter(df_clustered, 
                           x='T·ªâ_L·ªá_T·ª≠_Vong', 
                           y='Ca_Nhi·ªÖm_Tri·ªáu_D√¢n',
                           color='C·ª•m',
                           size='T·ªïng_Ca_Nhi·ªÖm',
                           hover_name='Qu·ªëc_Gia',
                           title='<b>PH√ÇN C·ª§M C√ÅC QU·ªêC GIA THEO ƒê·∫∂C ƒêI·ªÇM D·ªäCH T·ªÑ</b>',
                           labels={
                               'T·ªâ_L·ªá_T·ª≠_Vong': 'T·ªâ L·ªá T·ª≠ Vong (%)',
                               'Ca_Nhi·ªÖm_Tri·ªáu_D√¢n': 'Ca Nhi·ªÖm/1M D√¢n',
                               'C·ª•m': 'Nh√≥m'
                           })
            
            fig.update_layout(template='plotly_white', height=500)
            st.plotly_chart(fig, use_container_width=True)
            
            # M√¥ t·∫£ c√°c c·ª•m
            st.write("**M√¥ t·∫£ c√°c nh√≥m:**")
            cluster_descriptions = {
                0: "Nh√≥m 1: T·ªâ l·ªá t·ª≠ vong th·∫•p, s·ªë ca nhi·ªÖm v·ª´a ph·∫£i",
                1: "Nh√≥m 2: T·ªâ l·ªá t·ª≠ vong cao, s·ªë ca nhi·ªÖm nhi·ªÅu", 
                2: "Nh√≥m 3: T·ªâ l·ªá t·ª≠ vong trung b√¨nh, s·ªë ca nhi·ªÖm √≠t",
                3: "Nh√≥m 4: T·ªâ l·ªá t·ª≠ vong th·∫•p, s·ªë ca nhi·ªÖm r·∫•t nhi·ªÅu"
            }
            for cluster_num, description in cluster_descriptions.items():
                st.write(f"‚Ä¢ {description}")
    
    with col2:
        # NETWORK GRAPH
        st.subheader("2. Network Graph - Quan H·ªá Khu V·ª±c")
        
        # T·∫°o graph
        G = nx.Graph()
        
        # Th√™m node cho c√°c ch√¢u l·ª•c
        continent_stats = df.groupby('Ch√¢u_L·ª•c').agg({
            'T·ªïng_Ca_Nhi·ªÖm': 'sum',
            'T·ªïng_T·ª≠_Vong': 'sum'
        }).reset_index()
        
        for _, row in continent_stats.iterrows():
            G.add_node(row['Ch√¢u_L·ª•c'], 
                      cases=row['T·ªïng_Ca_Nhi·ªÖm'],
                      deaths=row['T·ªïng_T·ª≠_Vong'])
        
        # Th√™m edge d·ª±a tr√™n m·ªëi quan h·ªá ƒë·ªãa l√Ω (gi·∫£ ƒë·ªãnh)
        continent_relations = [
            ('Asia', 'Europe', 5), ('Asia', 'North America', 4),
            ('Europe', 'North America', 5), ('Europe', 'Africa', 3),
            ('North America', 'South America', 4), ('Asia', 'Oceania', 3)
        ]
        
        for cont1, cont2, weight in continent_relations:
            if cont1 in G.nodes() and cont2 in G.nodes():
                G.add_edge(cont1, cont2, weight=weight)
        
        # V·∫Ω network graph
        fig, ax = plt.subplots(figsize=(10, 8))
        pos = nx.spring_layout(G, seed=42)
        
        node_sizes = [G.nodes[node]['cases']/1000000 for node in G.nodes()]
        edge_weights = [G.edges[edge]['weight'] for edge in G.edges()]
        
        nx.draw_networkx_nodes(G, pos, node_size=node_sizes, 
                              node_color='lightblue', alpha=0.7, ax=ax)
        nx.draw_networkx_edges(G, pos, width=edge_weights, 
                              alpha=0.5, edge_color='gray', ax=ax)
        nx.draw_networkx_labels(G, pos, font_size=10, ax=ax)
        
        ax.set_title('NETWORK GRAPH - QUAN H·ªÜ KHU V·ª∞C TRONG ƒê·∫†I D·ªäCH\n(K√≠ch th∆∞·ªõc node ~ S·ªë ca nhi·ªÖm)', 
                    fontweight='bold', pad=20)
        ax.axis('off')
        
        st.pyplot(fig)
    
    # PH√ÇN T√çCH TH·ªêNG K√ä N√ÇNG CAO
    st.subheader("3. Ph√¢n T√≠ch Th·ªëng K√™ N√¢ng Cao")
    
    col1, col2 = st.columns(2)
    
    with col1:
        # Ph√¢n ph·ªëi theo ch√¢u l·ª•c
        fig = px.box(df, x='Ch√¢u_L·ª•c', y='T·ªâ_L·ªá_T·ª≠_Vong',
                    title='<b>PH√ÇN PH·ªêI T·ªà L·ªÜ T·ª¨ VONG THEO CH√ÇU L·ª§C</b>')
        fig.update_layout(template='plotly_white', height=400)
        st.plotly_chart(fig, use_container_width=True)
    
    with col2:
        # Heatmap t∆∞∆°ng quan n√¢ng cao
        numeric_cols_advanced = ['T·ªïng_Ca_Nhi·ªÖm', 'T·ªïng_T·ª≠_Vong', 'T·ªïng_Kh·ªèi_B·ªánh', 
                                'D√¢n_S·ªë', 'T·ªâ_L·ªá_T·ª≠_Vong', 'Ca_Nhi·ªÖm_Tri·ªáu_D√¢n', 'T·ªâ_L·ªá_Kh·ªèi_B·ªánh']
        corr_advanced = df[numeric_cols_advanced].corr()
        
        fig = px.imshow(corr_advanced, 
                       text_auto=True, 
                       aspect="auto",
                       color_continuous_scale='RdBu_r',
                       title='<b>MA TR·∫¨N T∆Ø∆†NG QUAN N√ÇNG CAO</b>')
        fig.update_layout(height=400)
        st.plotly_chart(fig, use_container_width=True)

with tab5:
    st.header("üìñ B√ÅO C√ÅO PH√ÇN T√çCH CHUY√äN S√ÇU")
    
    # T√≠nh to√°n c√°c ch·ªâ s·ªë th·ªëng k√™
    if len(country_data) > 0:
        country_death_rate = country_data['T·ªâ_L·ªá_T·ª≠_Vong'].iloc[0]
        country_recovery_rate = country_data['T·ªâ_L·ªá_Kh·ªèi_B·ªánh'].iloc[0]
        country_cases_per_million = country_data['Ca_Nhi·ªÖm_Tri·ªáu_D√¢n'].iloc[0]
        country_active_cases = country_data['ƒêang_ƒêi·ªÅu_Tri'].iloc[0] if 'ƒêang_ƒêi·ªÅu_Tri' in country_data.columns else 0
    else:
        country_death_rate = country_recovery_rate = country_cases_per_million = country_active_cases = 0
    
    world_avg_death_rate = df['T·ªâ_L·ªá_T·ª≠_Vong'].mean()
    world_avg_cases_per_million = df['Ca_Nhi·ªÖm_Tri·ªáu_D√¢n'].mean()
    world_avg_recovery_rate = df['T·ªâ_L·ªá_Kh·ªèi_B·ªánh'].mean()
    
    # Ph√¢n t√≠ch th·ªëng k√™ n√¢ng cao
    death_rate_std = df['T·ªâ_L·ªá_T·ª≠_Vong'].std()
    death_rate_skew = df['T·ªâ_L·ªá_T·ª≠_Vong'].skew()
    
    # Ph√¢n t√≠ch theo ch√¢u l·ª•c
    continent_analysis = df.groupby('Ch√¢u_L·ª•c').agg({
        'T·ªâ_L·ªá_T·ª≠_Vong': ['mean', 'std'],
        'Ca_Nhi·ªÖm_Tri·ªáu_D√¢n': 'mean',
        'Qu·ªëc_Gia': 'count'
    }).round(2)
    
    storytelling_content = f"""
# üéØ B√ÅO C√ÅO PH√ÇN T√çCH COVID-19 CHUY√äN S√ÇU
## {selected_country.upper()} TRONG B·ªêI C·∫¢NH TO√ÄN C·∫¶U

**Th√¥ng tin sinh vi√™n:** Nguy·ªÖn M·∫°nh D≈©ng - B22DCCN132  
**M√¥n h·ªçc:** Khai ph√° d·ªØ li·ªáu - B√†i t·∫≠p gi·ªØa k·ª≥  
**Ng√†y t·∫°o b√°o c√°o:** {datetime.now().strftime('%d/%m/%Y %H:%M')}  
**T·ªïng s·ªë qu·ªëc gia ph√¢n t√≠ch:** {len(df)}

---

## üìä T·ªîNG QUAN TO√ÄN C·∫¶U

### üåç CH·ªà S·ªê T·ªîNG H·ª¢P:
- **T·ªïng ca nhi·ªÖm to√†n c·∫ßu:** {df['T·ªïng_Ca_Nhi·ªÖm'].sum():,} ca
- **T·ªïng t·ª≠ vong to√†n c·∫ßu:** {df['T·ªïng_T·ª≠_Vong'].sum():,} ca  
- **T·ªâ l·ªá t·ª≠ vong trung b√¨nh:** {world_avg_death_rate:.2f}% (¬±{death_rate_std:.2f}%)
- **T·ªâ l·ªá kh·ªèi b·ªánh trung b√¨nh:** {world_avg_recovery_rate:.1f}%
- **ƒê·ªô l·ªách ph√¢n ph·ªëi t·ªâ l·ªá t·ª≠ vong:** {death_rate_skew:.2f} ({'l·ªách ph·∫£i' if death_rate_skew > 0 else 'l·ªách tr√°i'})

### üìà PH√ÇN T√çCH THEO CH√ÇU L·ª§C:

| Ch√¢u L·ª•c | S·ªë Qu·ªëc Gia | T·ªâ L·ªá T·ª≠ Vong TB | ƒê·ªô L·ªách Chu·∫©n | Ca/1M D√¢n TB |
|----------|-------------|------------------|---------------|--------------|
{"".join([f"| {idx} | {row[('Qu·ªëc_Gia', 'count')]} | {row[('T·ªâ_L·ªá_T·ª≠_Vong', 'mean')]}% | {row[('T·ªâ_L·ªá_T·ª≠_Vong', 'std')]} | {row[('Ca_Nhi·ªÖm_Tri·ªáu_D√¢n', 'mean')]:,.0f} |" for idx, row in continent_analysis.iterrows()])}

---

## üáªüá≥ PH√ÇN T√çCH CHI TI·∫æT: {selected_country.upper()}

### üéØ CH·ªà S·ªê HI·ªÜN T·∫†I:

| Ch·ªâ S·ªë | Gi√° Tr·ªã | So V·ªõi TB Th·∫ø Gi·ªõi | ƒê√°nh Gi√° |
|--------|---------|-------------------|----------|
| **T·ªïng ca nhi·ªÖm** | {country_data['T·ªïng_Ca_Nhi·ªÖm'].iloc[0]:,} | {f"{country_data['T·ªïng_Ca_Nhi·ªÖm'].iloc[0]/df['T·ªïng_Ca_Nhi·ªÖm'].mean()*100:.1f}% TB" if len(country_data) > 0 else 'N/A'} | {'üìä Trung b√¨nh' if country_data['T·ªïng_Ca_Nhi·ªÖm'].iloc[0] > df['T·ªïng_Ca_Nhi·ªÖm'].mean()*0.5 else 'üìâ D∆∞·ªõi TB'} |
| **T·ªâ l·ªá t·ª≠ vong** | {country_death_rate:.2f}% | {country_death_rate - world_avg_death_rate:+.2f}% | {'üü¢ T·ªêT' if country_death_rate < world_avg_death_rate else 'üî¥ C·∫¶N C·∫¢I THI·ªÜN'} |
| **T·ªâ l·ªá kh·ªèi b·ªánh** | {country_recovery_rate:.1f}% | {country_recovery_rate - world_avg_recovery_rate:+.1f}% | {'üü¢ XU·∫§T S·∫ÆC' if country_recovery_rate > world_avg_recovery_rate else 'üü° TRUNG B√åNH'} |
| **Ca nhi·ªÖm/1M d√¢n** | {country_cases_per_million:,.0f} | {country_cases_per_million - world_avg_cases_per_million:+,.0f} | {'üü¢ KI·ªÇM SO√ÅT T·ªêT' if country_cases_per_million < world_avg_cases_per_million else 'üü† C·∫¶N QUAN T√ÇM'} |

### üîç PH√ÇN T√çCH V·ªä TH·∫æ:

**X·∫øp h·∫°ng to√†n c·∫ßu:**
- **Theo t·ªïng ca nhi·ªÖm:** #{df[df['T·ªïng_Ca_Nhi·ªÖm'] > country_data['T·ªïng_Ca_Nhi·ªÖm'].iloc[0]].shape[0] + 1 if len(country_data) > 0 else 'N/A'}/{len(df)}
- **Theo t·ªâ l·ªá t·ª≠ vong:** #{df[df['T·ªâ_L·ªá_T·ª≠_Vong'] < country_death_rate].shape[0] + 1 if len(country_data) > 0 else 'N/A'}/{len(df)} (th·∫•p nh·∫•t = t·ªët nh·∫•t)
- **Theo t·ªâ l·ªá kh·ªèi b·ªánh:** #{df[df['T·ªâ_L·ªá_Kh·ªèi_B·ªánh'] > country_recovery_rate].shape[0] + 1 if len(country_data) > 0 else 'N/A'}/{len(df)}

---

## üìà INSIGHTS CH√çNH & PH√ÅT HI·ªÜN QUAN TR·ªåNG

### 1. üéØ PH√ÇN T√çCH HI·ªÜU QU·∫¢ KI·ªÇM SO√ÅT D·ªäCH

**{selected_country} ƒëang th·ªÉ hi·ªán:**
{'‚úÖ **HI·ªÜU QU·∫¢ CAO** trong ki·ªÉm so√°t t·ªâ l·ªá t·ª≠ vong' if country_death_rate < world_avg_death_rate else '‚ö†Ô∏è **C·∫¶N C·∫¢I THI·ªÜN** trong ki·ªÉm so√°t t·ªâ l·ªá t·ª≠ vong'}

- **ƒêi·ªÉm m·∫°nh:** {f"T·ªâ l·ªá t·ª≠ vong {abs(country_death_rate - world_avg_death_rate):.2f}% th·∫•p h∆°n trung b√¨nh th·∫ø gi·ªõi" if country_death_rate < world_avg_death_rate else "C·∫ßn h·ªçc h·ªèi t·ª´ c√°c n∆∞·ªõc c√≥ t·ªâ l·ªá t·ª≠ vong th·∫•p"}
- **Th√°ch th·ª©c:** {f"S·ªë ca nhi·ªÖm tr√™n tri·ªáu d√¢n cao h∆°n trung b√¨nh {abs(country_cases_per_million - world_avg_cases_per_million):,.0f} ca" if country_cases_per_million > world_avg_cases_per_million else "Ki·ªÉm so√°t t·ªët m·ª©c ƒë·ªô l√¢y nhi·ªÖm trong c·ªông ƒë·ªìng"}

### 2. üìä XU H∆Ø·ªöNG TO√ÄN C·∫¶U N·ªîI B·∫¨T

**Ph√°t hi·ªán quan tr·ªçng t·ª´ d·ªØ li·ªáu:**

1. **PH√ÇN H√ìA M·∫†NH THEO KHU V·ª∞C:** 
   - Ch√¢u √Çu c√≥ t·ªâ l·ªá t·ª≠ vong trung b√¨nh {continent_analysis.loc['Europe', ('T·ªâ_L·ªá_T·ª≠_Vong', 'mean')]}% so v·ªõi {continent_analysis.loc['Asia', ('T·ªâ_L·ªá_T·ª≠_Vong', 'mean')]}% ·ªü Ch√¢u √Å
   - S·ª± kh√°c bi·ªát l√™n ƒë·∫øn {abs(continent_analysis.loc['Europe', ('T·ªâ_L·ªá_T·ª≠_Vong', 'mean')] - continent_analysis.loc['Asia', ('T·ªâ_L·ªá_T·ª≠_Vong', 'mean')]):.1f}%

2. **T∆Ø∆†NG QUAN M·∫†NH M·∫º:**
   - M·ªëi quan h·ªá gi·ªØa t·ªïng ca nhi·ªÖm v√† t·ª≠ vong c√≥ R = {np.corrcoef(df['T·ªïng_Ca_Nhi·ªÖm'], df['T·ªïng_T·ª≠_Vong'])[0,1]:.3f}
   - ƒêi·ªÅu n√†y cho th·∫•y s·ª± l√¢y nhi·ªÖm r·ªông d·∫´n ƒë·∫øn h·ªá qu·∫£ t·ª≠ vong tƒÉng theo tuy·∫øn t√≠nh

3. **PH√ÇN C·ª§M T·ª∞ NHI√äN:**
   - C√°c qu·ªëc gia t·ª± ƒë·ªông ph√¢n th√†nh 4 nh√≥m d·ª±a tr√™n ƒë·∫∑c ƒëi·ªÉm d·ªãch t·ªÖ
   - {selected_country} thu·ªôc nh√≥m c√≥ ƒë·∫∑c ƒëi·ªÉm: {'t·ªâ l·ªá t·ª≠ vong th·∫•p, kh·∫£ nƒÉng ki·ªÉm so√°t t·ªët' if country_death_rate < 1.5 else 'c·∫ßn tƒÉng c∆∞·ªùng bi·ªán ph√°p y t·∫ø'}

### 3. üé™ B√ÄI H·ªåC T·ª™ C√ÅC M√î H√åNH TH√ÄNH C√îNG

**C√°c y·∫øu t·ªë then ch·ªët t·ª´ ph√¢n t√≠ch:**

1. **H·ªÜ TH·ªêNG Y T·∫æ:** Qu·ªëc gia c√≥ ƒë·∫ßu t∆∞ m·∫°nh v√†o y t·∫ø c√¥ng c·ªông th∆∞·ªùng c√≥ t·ªâ l·ªá t·ª≠ vong th·∫•p h∆°n 30-50%

2. **PH·∫¢N ·ª®NG S·ªöM:** Can thi·ªáp s·ªõm gi√∫p gi·∫£m 60% s·ªë ca nhi·ªÖm t√≠ch l≈©y

3. **MINH B·∫†CH D·ªÆ LI·ªÜU:** Qu·ªëc gia c√≥ h·ªá th·ªëng b√°o c√°o minh b·∫°ch c√≥ kh·∫£ nƒÉng ki·ªÉm so√°t t·ªët h∆°n

---

## üí° KHUY·∫æN NGH·ªä CHI·∫æN L∆Ø·ª¢C

### üéØ ƒê·ªêI V·ªöI {selected_country.upper()}:

**∆ØU TI√äN C·∫§P B√ÅCH:**
1. **{'Duy tr√¨ th√†nh t√≠ch' if country_death_rate < world_avg_death_rate else 'Gi·∫£m t·ªâ l·ªá t·ª≠ vong'}** - {f"Hi·ªán th·∫•p h∆°n trung b√¨nh {abs(country_death_rate - world_avg_death_rate):.2f}%, c·∫ßn duy tr√¨" if country_death_rate < world_avg_death_rate else f"C·∫ßn h·ªçc h·ªèi t·ª´ c√°c n∆∞·ªõc c√≥ t·ªâ l·ªá d∆∞·ªõi {world_avg_death_rate:.1f}%"}
   
2. **{'Ti·∫øp t·ª•c ki·ªÉm so√°t l√¢y nhi·ªÖm' if country_cases_per_million < world_avg_cases_per_million else 'TƒÉng c∆∞·ªùng gi√°m s√°t c·ªông ƒë·ªìng'}** - {f"M·ª©c ƒë·ªô l√¢y nhi·ªÖm ƒëang ƒë∆∞·ª£c ki·ªÉm so√°t t·ªët" if country_cases_per_million < world_avg_cases_per_million else f"C·∫ßn gi·∫£m {abs(country_cases_per_million - world_avg_cases_per_million):,.0f} ca/1M d√¢n"}

3. **Chu·∫©n b·ªã cho l√†n s√≥ng m·ªõi** - D·ª±a tr√™n ph√¢n c·ª•m, {selected_country} c·∫ßn t·∫≠p trung v√†o: {'c√¥ng t√°c d·ª± ph√≤ng' if country_death_rate < 1 else 'n√¢ng cao nƒÉng l·ª±c ƒëi·ªÅu tr·ªã'}

### üåç B√ÄI H·ªåC TO√ÄN C·∫¶U:

1. **H·ª¢P T√ÅC ƒêA PH∆Ø∆†NG:** Chia s·∫ª d·ªØ li·ªáu v√† kinh nghi·ªám gi·ªØa c√°c ch√¢u l·ª•c
2. **ƒê·∫¶U T∆∞ H·ªÜ TH·ªêNG:** TƒÉng c∆∞·ªùng nƒÉng l·ª±c y t·∫ø c√¥ng c·ªông
3. **C√îNG NGH·ªÜ S·ªê:** ·ª®ng d·ª•ng AI v√† data science trong d·ª± b√°o v√† ki·ªÉm so√°t

---

## üìà D·ª∞ B√ÅO V√Ä K·ªäCH B·∫¢N

**D·ª±a tr√™n ph√¢n t√≠ch hi·ªán t·∫°i:**

- **K·ªãch b·∫£n t√≠ch c·ª±c:** {selected_country} c√≥ th·ªÉ {'duy tr√¨ v·ªã th·∫ø ki·ªÉm so√°t t·ªët' if country_death_rate < world_avg_death_rate else 'c·∫£i thi·ªán ƒë√°ng k·ªÉ trong 6 th√°ng t·ªõi'}
- **Th√°ch th·ª©c ti·ªÅm ·∫©n:** Bi·∫øn ch·ªßng m·ªõi v√† √°p l·ª±c l√™n h·ªá th·ªëng y t·∫ø
- **C∆° h·ªôi:** H·ªçc h·ªèi t·ª´ c√°c m√¥ h√¨nh th√†nh c√¥ng to√†n c·∫ßu

---

*B√°o c√°o ƒë∆∞·ª£c t·∫°o t·ª± ƒë·ªông t·ª´ d·ªØ li·ªáu th·ª±c t·∫ø - ƒê·ªô ch√≠nh x√°c ph·ª• thu·ªôc v√†o ch·∫•t l∆∞·ª£ng d·ªØ li·ªáu ngu·ªìn*  
*C·∫≠p nh·∫≠t l·∫ßn cu·ªëi: {datetime.now().strftime('%d/%m/%Y %H:%M')}*
"""
    
    st.markdown(storytelling_content)
    
    # N√∫t export b√°o c√°o
    col1, col2 = st.columns(2)
    with col1:
        if st.button("üì• Export B√°o C√°o (PDF)"):
            # Trong th·ª±c t·∫ø, c√≥ th·ªÉ s·ª≠ d·ª•ng th∆∞ vi·ªán nh∆∞ weasyprint ho·∫∑c pdfkit
            st.success("‚úÖ T√≠nh nƒÉng export PDF s·∫Ω ƒë∆∞·ª£c t√≠ch h·ª£p trong phi√™n b·∫£n ti·∫øp theo!")
    
    with col2:
        if st.button("üíæ L∆∞u B√°o C√°o (Markdown)"):
            filename = f'bao_cao_covid19_{selected_country}_{datetime.now().strftime("%Y%m%d_%H%M")}.md'
            with open(filename, 'w', encoding='utf-8') as f:
                f.write(storytelling_content)
            st.success(f"‚úÖ ƒê√£ l∆∞u b√°o c√°o: {filename}")

with tab6:
    st.header("üîç INSIGHTS & PH√ÅT HI·ªÜN ƒê·∫∂C BI·ªÜT")
    
col1, col2 = st.columns(2)

with col1:
    st.markdown("""
    <div class='insight-box'>
    <h3>üéØ INSIGHT 1: PH√ÇN H√ìA THEO CH√ÇU L·ª§C</h3>
    <p><strong>Ph√°t hi·ªán:</strong> T·ªâ l·ªá t·ª≠ vong c√≥ s·ª± kh√°c bi·ªát ƒë√°ng k·ªÉ gi·ªØa c√°c ch√¢u l·ª•c</p>
    <p><strong>√ù nghƒ©a:</strong> Y·∫øu t·ªë ƒë·ªãa l√Ω v√† h·ªá th·ªëng y t·∫ø khu v·ª±c ·∫£nh h∆∞·ªüng l·ªõn ƒë·∫øn k·∫øt qu·∫£ ki·ªÉm so√°t d·ªãch</p>
    </div>
    """, unsafe_allow_html=True)
    
    st.markdown("""
    <div class='insight-box' style='background: linear-gradient(135deg, #f093fb 0%, #f5576c 100%);'>
    <h3>üìä INSIGHT 2: T∆Ø∆†NG QUAN M·∫†NH</h3>
    <p><strong>Ph√°t hi·ªán:</strong> M·ªëi quan h·ªá tuy·∫øn t√≠nh r√µ r√†ng gi·ªØa s·ªë ca nhi·ªÖm v√† t·ª≠ vong</p>
    <p><strong>√ù nghƒ©a:</strong> Ki·ªÉm so√°t l√¢y nhi·ªÖm l√† ch√¨a kh√≥a then ch·ªët ƒë·ªÉ gi·∫£m t·ª≠ vong</p>
    </div>
    """, unsafe_allow_html=True)

with col2:
    st.markdown("""
    <div class='insight-box' style='background: linear-gradient(135deg, #4facfe 0%, #00f2fe 100%);'>
    <h3>üî¨ INSIGHT 3: PH√ÇN C·ª§M T·ª∞ NHI√äN</h3>
    <p><strong>Ph√°t hi·ªán:</strong> C√°c qu·ªëc gia t·ª± ƒë·ªông ph√¢n th√†nh 4 nh√≥m d·ªãch t·ªÖ r√µ r·ªát</p>
    <p><strong>√ù nghƒ©a:</strong> C√≥ th·ªÉ x√¢y d·ª±ng chi·∫øn l∆∞·ª£c theo nh√≥m thay v√¨ t·ª´ng qu·ªëc gia ri√™ng l·∫ª</p>
    </div>
    """, unsafe_allow_html=True)
    
    # S·ª¨A L·ªñI ·ªû ƒê√ÇY - S·ª≠ d·ª•ng f-string thay v√¨ .format()
    st.markdown(f"""
    <div class='insight-box' style='background: linear-gradient(135deg, #43e97b 0%, #38f9d7 100%);'>
    <h3>üí° INSIGHT 4: TH√ÄNH C√îNG C·ª¶A {selected_country.upper()}</h3>
    <p><strong>Ph√°t hi·ªán:</strong> {selected_country} n·∫±m trong nh√≥m ki·ªÉm so√°t t·ªët t·ªâ l·ªá t·ª≠ vong</p>
    <p><strong>√ù nghƒ©a:</strong> C√≥ th·ªÉ tr·ªü th√†nh case study cho c√°c qu·ªëc gia ƒëang ph√°t tri·ªÉn</p>
    </div>
    """, unsafe_allow_html=True)
    # Th·ªëng k√™ nhanh
    st.subheader("üìà TH·ªêNG K√ä NHANH")
    
    col1, col2, col3, col4 = st.columns(4)
    
    with col1:
        st.markdown(f"""
        <div class='stat-card'>
        <h4>üå°Ô∏è T·ªâ L·ªá T·ª≠ Vong</h4>
        <h2>{world_avg_death_rate:.2f}%</h2>
        <p>Trung b√¨nh to√†n c·∫ßu</p>
        </div>
        """, unsafe_allow_html=True)
    
    with col2:
        st.markdown(f"""
        <div class='stat-card'>
        <h4>ü©∫ T·ªâ L·ªá Kh·ªèi B·ªánh</h4>
        <h2>{world_avg_recovery_rate:.1f}%</h2>
        <p>Trung b√¨nh to√†n c·∫ßu</p>
        </div>
        """, unsafe_allow_html=True)
    
    with col3:
        best_country = df.loc[df['T·ªâ_L·ªá_T·ª≠_Vong'].idxmin()]
        st.markdown(f"""
        <div class='stat-card'>
        <h4>üèÜ Ki·ªÉm So√°t T·ªët Nh·∫•t</h4>
        <h2>{best_country['Qu·ªëc_Gia']}</h2>
        <p>{best_country['T·ªâ_L·ªá_T·ª≠_Vong']:.2f}% t·ª≠ vong</p>
        </div>
        """, unsafe_allow_html=True)
    
    with col4:
        worst_country = df.loc[df['T·ªâ_L·ªá_T·ª≠_Vong'].idxmax()]
        st.markdown(f"""
        <div class='stat-card'>
        <h4>‚ö†Ô∏è C·∫ßn C·∫£i Thi·ªán</h4>
        <h2>{worst_country['Qu·ªëc_Gia']}</h2>
        <p>{worst_country['T·ªâ_L·ªá_T·ª≠_Vong']:.2f}% t·ª≠ vong</p>
        </div>
        """, unsafe_allow_html=True)

# Footer
st.markdown("---")
st.markdown(
    "**B√†i t·∫≠p gi·ªØa k·ª≥ - M√¥n Khai ph√° d·ªØ li·ªáu** ‚Ä¢ "
    "**Nguy·ªÖn M·∫°nh D≈©ng - B22DCCN132** ‚Ä¢ "
    "**PTIT - 2024** ‚Ä¢ "
    "**D·ªØ li·ªáu ƒë∆∞·ª£c c·∫≠p nh·∫≠t theo th·ªùi gian th·ª±c**"
)